INSTALL

configure, build and install R with

	./configure --with-aqua --enable-R-framework
	make
	sudo make install
	
Once you have the R.framework installed in /Library/Frameworks, you
can build R.app.

Note that for universal GUI you will have to set r_arch in configure
above to one of the supported architectures, currently i386 or x86_64.


 Building R.app
================

Since R.app GUI 1.40 only Mac OS X 10.5 and higher are supported. The project
is called "R.xcodeproj" and requires Xcode 3.0 or higher. If you need a support
for older Mac OS X version, you use a GUI version before 1.40.

The project can be built by selecting "R" target and "Build" inside
the XCode GUI.

To build the project from the command line in Mac-GUI directory use:
	xcodebuild -target R -configuration Leopard

Supported configurations are:
  Leopard (32-bit Intel, release, OS X 10.5+)
  Leopard64 (64-bit Intel, release, OS X 10.5+)
  SnowLeopard (32 and 64-bit Intel, release, OS X 10.6+)
  Debug (native arch, with debugging output, current OS X)
  Lion (32-bit Intel, release, OS X 10.7+, Xcode 4.5)
  Lion64 (64-bit Intel, release, OS X 10.7+, Xcode 4.5)

To build the R for Mac OS X Faq use either
	xcodebuild -target Docs
or manually in docs folder
	makeinfo -D UseExternalXrefs --html --force --no-split RMacOSX-FAQ.texi
	
In any case the resulting html FAQ file can be found in Mac-GUI/docs directory.


Note about binary compatibility:

The general rules for R apply, that is binary compatibility is given
only if the major and minor version numbers match - only the patch
level may differ. When using the X.Y.Z version form it means that X.Y
must match. For example R-GUIs linked to 2.0.x and 2.1.x are NOT
binary compatible (and there is some conditional code in the GUI).

The compiled R.app is usually bound to a specific version, such as
2.0.1. If you upgrade R removing the older version, let's say using
R.app built for 2.0.0 and updating R to 2.0.1, you may need to fix the
absolute path to libR.dylib. The nightly builds use generic path
/Library/Frameworks/R.framework/Resources/lib/libR.dylib which points
to the latest version of R, but this is done by an additional call to
install_name_tool in the building script. Release versions of the GUI
use a fixed-version path as they come with a specific R version (in fact
the default behavior doesn't depends on the GUI, but on libR.dylib -
changing its own reference entry changes the way R.app is linked).

--
 Last update: 2011-03-15
