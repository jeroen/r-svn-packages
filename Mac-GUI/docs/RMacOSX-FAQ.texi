\input texinfo
@c %**start of header
@setfilename RMacOSX-FAQ.info
@settitle R for Mac OS X FAQ
@setchapternewpage on
@set FAQ-YEAR 2008
@set FAQ-VERSION 2.6-2 @value{FAQ-YEAR}-02-08
@set REL-VERSION 2.6.2
@set GUI-VERSION 1.23
@documentlanguage en
@documentencoding ISO-8859-1
@c %**end of header

@c % makeinfo -D UseExternalXrefs --html --force --no-split RMacOSX-FAQ.texi

@dircategory Programming
@direntry
* R for Mac OS X FAQ: (MacOSX-FAQ).               The FAQ on R for Mac OS X
@end direntry

@finalout

@macro SPLUS{}
@sc{S-Plus}
@end macro

@macro R{}
@acronym{R}
@end macro

@macro CRAN{}
@acronym{CRAN}
@end macro

@macro HTML{}
@acronym{HTML}
@end macro

@macro FORTRAN{}
FORTRAN
@end macro

@macro XML{}
@acronym{XML}
@end macro

@macro XSL{}
@acronym{XSL}
@end macro

@macro Rapp{}
@sc{R.app}
@end macro


@titlepage
@title R for Mac OS X @acronym{FAQ}
@subtitle Frequently Asked Questions on R for Mac OS X
@subtitle Version @value{FAQ-VERSION}
@author Stefano M. Iacus, Simon Urbanek, Rob J. Goedman
@end titlepage

@ifinfo
@c We do not really see this in info, but in plain text output.
R for Mac OS X FAQ						 @*
Frequently Asked Questions on R for Mac OS X@*
Version @value{FAQ-VERSION}      @*
Stefano M. Iacus                 @*
Simon Urbanek                    @*
Rob J. Goedman                   @*

@sp 2
@end ifinfo

@ifnothtml
@contents
@end ifnothtml

@ifnottex
@node Top, Introduction, (dir), (dir)
@top R for Mac OS X FAQ
@ifhtml
@html
<h2>Frequently Asked Questions on R for Mac OS X</h2>
<h2>Version @value{FAQ-VERSION}, R.app @value{GUI-VERSION}</h2>
<address>Stefano M. Iacus</address>
<address>Simon Urbanek</address>
<address>Rob J. Goedman</address>
<p><p><hr><p>
@end html
@end ifhtml
@end ifnottex

@menu
* Introduction::                
* Building R from sources::     
* Command line version of R::   
* R.app::                       
* How to install packages::     
* R and external applications::  
* Quartz device::               
* TclTk issues::                
* Internationalization of the R.app::  
* Additional resources::        
* Acknowledgments::             
* Sparse questions::            
@end menu

@node Introduction, Building R from sources, Top, Top
@chapter Introduction
This R for Mac OS X FAQ is rather incomplete at the moment and requires contributions from users.
Anything specific to the R language can be found in the official R-FAQ (see @uref{http://cran.r-project.org/doc/FAQ/R-FAQ.html}).
Please send any requests/questions you would like answers on to the maintainers.

In this document @R{} refers to the core, command line based @R{} system while @samp{R.app} refers to the GUI based Mac OS application that controls the underlying @R{}.

This document contains information on how to build @R{} from sources, how to install and run it.
It also contains a user guide to the @samp{R.app} version of @R{}.
@menu
* How many versions of R for Mac OS X?::  
* What machines does R for Mac OS X run on?::  
* How can R for Mac OS X be obtained and installed?::  
* How can R for Mac OS X be uninstalled?::  
@end menu

@node How many versions of R for Mac OS X?, What machines does R for Mac OS X run on?, Introduction, Introduction
@section How many versions of R for Mac OS X?

There is currently only one version of R for Mac OS X.
However, @R{} on Mac OS X can be used either on the command-line (@pxref{Command line version of R}) like on other Unix systems, or via the R.app GUI (@pxref{R.app}). The second approach is mostly preferred by Macintosh users.

@node What machines does R for Mac OS X run on?, How can R for Mac OS X be obtained and installed?, How many versions of R for Mac OS X?, Introduction
@section What machines does R for Mac OS X run on?

R for Mac OS X requires Mac OS X version 10.2 (Jaguar) or higher to run. The R.app GUI requires Mac OS X 10.3 (Panther) or higher. The latest version of the system is always preferable, though. We do not support Mac OS X version 10.1 and earlier. The binaries provided on @CRAN{} are universal and require Mac OS X 10.4.4 (Tiger) or higher.

@R{} can be compiled from sources as a pure 64-bit application on PowerMac G5 and Intel x86_64 machines on Mac OS X 10.4 or higher. R.app GUI can be built for 64-bit R as well, but Mac OS X 10.5 (Leopard) or higher is necessary.

@node How can R for Mac OS X be obtained and installed?, How can R for Mac OS X be uninstalled?, What machines does R for Mac OS X run on?, Introduction
@section How can R for Mac OS X be obtained and installed?

@R{} for Mac OS X is available on @CRAN{} in the form of a disk image containing a multi-package consisting of the R framework, the R.app GUI and optional libraries. The image is usually named @file{R.dmg} with optional version number.

The installation is done by double-clicking on the disk image, which opens a new Finder window with the installer package, followed by double-clicking on that package installer. The installer will guide you through the steps necessary to install @R{} on Mac OS X. Note that the installer will require password or login of an administrator. The installation can be customized, but the default is suitable for most users.

Note that @R{} version 2.6.0 and earlier do not install properly on Mac OS X 10.5 (Leopard) which was not released by that time. Such old @R{} versions can be installed manually by double-clicking on individual installation packages in the @file{Packages} directory of the distribution.

If you experience problems with @R{}, we highly recommend the use of the @CRAN{} binary package to make sure @R{} was built correctly. Nevertheless it is possible to build @R{} from the sources which can be useful for special purposes. Note that the @CRAN{} binary includes R shared library, so there is no need to re-compile @R{} with @code{--enable-R-shlib}.

@node How can R for Mac OS X be uninstalled?,  , How can R for Mac OS X be obtained and installed?, Introduction
@section How can R for Mac OS X be uninstalled?

@R{} for Mac OS X consists of two parts: the GUI (R.app) and the R framework. The un-installation is as simple as removing those two folders (e.g. by dragging them into the Trash). The typical installation will install the GUI into the @file{/Applications} folder and the R framework in the @file{/Library/Frameworks} folder.

If you want to get rid of R from the Terminal, simply run (prepend @code{sudo} if you don't have admin privileges):

@example
rm -rf /Library/Frameworks/R.framework /Applications/R.app
@end example

However, Mac OS X also keeps an installation receipt if an application was installed using the Apple Installer. These receipts are usually kept in @file{/Library/Receipts} and Apple's Installer decides based on the receipt whether a program will be installed or upgraded. If you do not want to perform an upgrade (e.g. if you want to keep multiple @R{} versions in parallel), you will have to remove the corresponding receipt(s). Depending on the OS X version @code{rm -rf /Library/Receipts/R-*} may work. The exact details are system-dependent, please see the corrensponding documentation by Apple.

@node Building R from sources, Command line version of R, Introduction, Top
@chapter Building R from sources
@menu
* What is needed to build R::   
* How to configure and build R::  
* How to install R::            
* How to build and install the R.app::  
* How to build universal R::    
@end menu

@node What is needed to build R, How to configure and build R, Building R from sources, Building R from sources
@section What is needed to build R

The requirements for building @R{} vary, depending whether the build machine is an Intel-based or PowerPC-based Mac and whether universal build is desired. The following description shows the minimum requirements for building @R{}. The process of building a universal binary is more complex and described in section @pxref{How to build universal R}.

@menu
* C/C++ compiler (gcc 3.3 or later)::  
* Fortran compiler (g77 3.3 or later)::  
* libreadline 4.3 or higher (optional)::  
* X11 window server (optional)::  
* X11 TclTk headers and libraries (optional)::  
* Aqua TclTk headers and libraries (optional)::  
* TeX suite of tools for documentation (optional)::  
@end menu

@node C/C++ compiler (gcc 3.3 or later), Fortran compiler (g77 3.3 or later), What is needed to build R, What is needed to build R
@subsection C/C++ compiler (gcc 3.3 or later)

If you have Mac OS X 10.3 (aka Panther) or higher you just need to install the software from the Xcode Tools CD or DVD. This is only true if you bought retail version of Mac OS X. If your computer came with pre-installed version of OS X, look into @file{/Applications/Installers}. Recent installations feature @file{Xcode Tools} folder containing the necessary installer. If neither of the above works for you, download Xcode from @uref{http://developer.apple.com/tools/xcode/}.

If you are using Mac OS X 10.2 (aka Jaguar) then you should download and install the 
Apple Developers Tools Dec 2002 including the latest updates which dates August 2003. Either it comes 
on a separate CD with your Mac or you can download these from the Apple Developer Connection site (@pxref{Apple Developer Connection})
In either cases be sure you have gcc version 3.3 or later - you can check the version by typing the following in a Terminal window:
@example
gcc --version
@end example

Users of Intel Macs have to use @samp{gcc} version 4.0 or higher, because @samp{gcc} 3.x is not supported on Intel Macs.

@node Fortran compiler (g77 3.3 or later), libreadline 4.3 or higher (optional), C/C++ compiler (gcc 3.3 or later), What is needed to build R
@subsection Fortran compiler (g77 3.3 or later)

Unfortunately the Xcode Tools don't include a Fortran compiler. You need to install a version 3.3 or later of the Fortran compiler from gcc which is built for Mac OS X. @R{} 2.6.2 @CRAN{} binary comes with GNU Fortran 4.2.1 in the gfortran optional package. If you plan to install packages from sources, select "custom install" during R installation and enable the GNU Fortran from the list of packages. It is also available separately from @uref{http://r.research.att.com/tools/}. The @CRAN{} binaries are configured to use Apple's gcc and the supplied Fortran compiler (see also @pxref{Why do I need custom compilers for the CRAN binary?}).

Please note that it is important that the major version of the Fortran compiler matches the version of your C compiler! You can only use gcc 3.x with g77 3.x or gcc 4.x with gfortran 4.x, other combinations usually don't work.

@node libreadline 4.3 or higher (optional), X11 window server (optional), Fortran compiler (g77 3.3 or later), What is needed to build R
@subsection libreadline 4.3 or higher (optional)
The readline library is optional and only necessary for OS X 10.3 (Panther) and earlier. Mac OS X 10.4 (Tiger) comes with @samp{libedit} library which emulates readline. Nevertheless, GNU readline has some additional functionality so it may be worth installing anyway.

Readline is necessary if you want to be able to retrieve history using use arrow keys or for @key{TAB} completion of filenames when you run R as a command line tool. The original source archive is located at GNU web page @uref{ftp://www.gnu.org}. (Also consider installing the @samp{rcompletion} package that uses readline for code-completion in R).

Readline 5.0 and later compile out-of-the box, however it is recommended to use @code{make CPPFLAGS=-DNEED_EXTERN_PC}, Because the configure script fails to detect that flag. The use of readline 5.2 with recent patches is recommended due to bugs in earlier versions that can lead to crashes.

To compile readline, uncompress the source archive and follow the standard installation sequence:
@example
./configure
make CPPFLAGS=-DNEED_EXTERN_PC
sudo make install
@end example
It installs everything in @file{/usr/local}.

@emph{Note:} It is possible to build multi-architecture readline binary in one step, for example set @samp{CC='gcc -arch ppc -arch ppc64 -arch i386 -arch x86_64'} to build all four architectures (see Apple Xcode tools reference for details). Such binary is available from @uref{http://r.research.att.com/exp/}.

@node X11 window server (optional), X11 TclTk headers and libraries (optional), libreadline 4.3 or higher (optional), What is needed to build R
@subsection X11 window server (optional)
X11 window system is necessary to use the X11 device in R and other devices that rely on X11.

Mac OS X 10.5 (Leopard) installs X11 by default, however the default X11 installaation (as of Mac OS X 10.5.1) ships with a broken OpenGL library that prevents compilation. See @uref{http://r.research.att.com/building.html} for the latest update on the details. Also @code{/usr/X11/bin} must be on the @code{PATH} in order for @R{} to recognize X11 properly (e.g. by issuing @code{export PATH=/usr/X11/bin:$PATH}).

Mac OS X 10.3 (Panther) and 10.4 (Tiger) include X11 on the installation CD/DVD, however, it is not selected by default. If it is not installed, you can re-install it using the original installation CD/DVD.

To install X11 on those systems, follow these steps:

@enumerate
@item
Insert Mac OS X Disk 1 (CD/DVD) that came with your Mac

@item
@key{Ctrl}-Click (or right button click) on "Install Bundled Software Only", select "Show Original"

@item
double-click on "X11User.pkg"
@end enumerate

If you have a retail version of OS X, replace second step by
@enumerate 2
@item
Go to @samp{System/Installation/Packages} direrctory on the DVD
@end enumerate

In addition to the user part, you need to install the X11 SDK package from the Xcode Tools CD. In Xcode 2.4.0 and higher this is the default if X11 is installed, therefore it is important to install X11 before installing Xcode.

Mac OS X 10.2 (Jaguar) does not include X11 installer. However, there are two options to obtain X11: Apple released X11 beta for Jaguar which is still around, although not officially supported. It features the Quartz window manager that integrates nicely into the system. If you are unable to find Apple's X11 beta, you will need to install both the X11 Window server and the X11 SDK package from the XFree86 web page. Other versions such as using fink are available, too.

@node X11 TclTk headers and libraries (optional), Aqua TclTk headers and libraries (optional), X11 window server (optional), What is needed to build R
@subsection X11 TclTk headers and libraries (optional)
If you plan to use tcltk package for @R{}, you can either use Tcl/Tk headers and library supplied in the @R{} @CRAN{} binary or compile your own. The @CRAN{} binary includes universal Tcl/Tk 8.4.12 for X11. This package is optional so you need to select "custom install" during R installation and enable it. This is the recommended procedure because it will allow you to use @CRAN{} @R{} package binaries as well.

Alternatively you need to download the sources of the Tcl and Tk 8.4.x packages to build yourself the sources. 
The original sources can be found on the official TclTk web page @uref{http://www.tcl.tk/software/tcltk/8.4.html}.
Please do the following respecting the sequence (you'll be asked for a root password). These are examples for version 8.4.12
of the Tcl and Tk sources, you'll probably find new version on the web page, thus only the name of the .tar.gz archives
changes.

The following shell commands will download, compile and install universal Tcl/Tk. Modify the configure part to suit your needs, such as if you don't need all architectures:
@example
cd /tmp/
curl -O http://internap.dl.sourceforge.net/sourceforge/tcl/tcl8.4.12-src.tar.gz
curl -O http://internap.dl.sourceforge.net/sourceforge/tcl/tk8.4.12-src.tar.gz
tar fxz tcl8.4.12-src.tar.gz
cd tcl8.4.12/unix
CFLAGS='-arch i386 -arch ppc -arch ppc64 -arch x86_64' ./configure --with-x \
--disable-corefoundation --enable-threads --disable-symbols --disable-aqua
make
sudo make install

cd ../..
tar fxz tk8.4.12-src.tar.gz
cd tk8.4.12/unix
CFLAGS='-arch i386 -arch ppc -arch ppc64 -arch x86_64' ./configure --with-x \
--disable-corefoundation --enable-threads --disable-symbols --disable-aqua
make
sudo make install
@end example

@node Aqua TclTk headers and libraries (optional), TeX suite of tools for documentation (optional), X11 TclTk headers and libraries (optional), What is needed to build R
@subsection Aqua TclTk headers and libraries (optional)
Mac OS X 10.4 (Tiger) comes with Aqua TclTk libraries. If those are not detected automatically, use the following flags with @code{configure}:
@example
--with-tcl-config=/System/Library/Frameworks/Tcl.framework/tclConfig.sh 
--with-tk-config=/System/Library/Frameworks/Tk.framework/tkConfig.sh
@end example

For older versions of OS X you need to obtain Aqua TclTk separately. Once you have installed the AquaTclTk libraries and headers files, you can configure @R{} using these additional
arguments
@example
--with-tcl-config=/Library/Frameworks/Tcl.framework/tclConfig.sh 
--with-tk-config=/Library/Frameworks/Tk.framework/tkConfig.sh
TCLTK_LIBS='-framework Tcl -framework Tk'
TCLTK_CPPFLAGS='-I/Library/Frameworks/Tcl.Framework/Headers -I/Library/Frameworks/Tk.Framework/Headers'
@end example

Note that currently R.app doesn't support Aqua Tcl/Tk, because of conflicting event loops.

@node TeX suite of tools for documentation (optional),  , Aqua TclTk headers and libraries (optional), What is needed to build R
@subsection TeX suite of tools for documentation (optional)
There is a nice installer, called the @emph{i-Installer II}, that allows you to install a complete 
te@TeX{} distribution. You can find details on the i-Installer at @uref{http://www.rna.nl/ii.html}. 
The te@TeX{} is one of the i-Packages.

Note: You may also want to install @TeX{}Shop (@uref{http://www.uoregon.edu/~koch/texshop/texshop.html}). Beside wonderful GUI for editing @TeX{} files that page also provides many useful links for @TeX{} on Mac OS X.

@node How to configure and build R, How to install R, What is needed to build R, Building R from sources
@section How to configure and build R
Download the latest sources of R from @CRAN{} or fetch them using SVN. Unpack the archive with tar -zxf @emph{name_of_R_sources_archive} and cd
inside the R sources directory. Then you need to configure R for your system and build R. 
Just type
@example
./configure
make
@end example
This will configure R to be built as a Framework to be installed inside your @emph{/Library/Frameworks} directory with the name @emph{R.framework}. @code{make} will compile R. Such compiled @R{} can already be used by running the @code{bin/R} script.

Some additional, useful flags that you may want to add to configure include:
@itemize
@item
@code{--with-blas='-framework vecLib'} enables @code{vecLib} as BLAS implementation. Given that @code{vecLib} is highly optimized by Apple, it is recommended for most users.

@item
@code{--enable-BLAS-shlib} enables the use of @code{libRblas.dylib} which separates BLAS from the R library. This allows you to switch between various BLAS implementations (such as vecLib, internal R BLAS and ATLAS) without the need to re-compile R. It is in general a good idea and can be used with both internal BLAS and vecLib.

@c -- better keep quiet, it is not recommended --
@c @item
@c @code{--disable-R-framework} builds R the 'unix' way, not as a framework. This is in general not recommended, but users that want exactly the same layout as on other unices may prefer this. Note that this influences mainly the installation of R, not the compilation - in fact R compiled as a framework still behaves the 'unix' way until installed.
@end itemize

You can change the default location of the @emph{R.framework} 
installation at configure time by specifying the flag @code{--enable-R-framework[=DIR]}, i.e. 
with something like
@example
./configure --enable-R-framework=FOO
@end example
and the final destination of the @emph{R.framework} will be @emph{FOO/R.framework}, which means that you 
don't have to specify the @emph{R.framework} text in the path. 

The R framework supports multiple versions of R in the same framework, thus allowing parallel R versions to co-exist. By default R version @samp{x.y.z} will install into the @samp{Versions/x.y} subdirectory of the framework. The name of the subdirectory can be overridden by using @samp{FW_VERSION} configure setting, such as for example @samp{FW_VERSION=R-devel} which will install in @samp{Versions/R-devel}. The currently used framework is always the one pointed to by the @samp{Versions/Current}, see Apple's documentation on framework bundle anatomy for details (@uref{http://developer.apple.com/documentation/MacOSX/Conceptual/BPFrameworks/Concepts/FrameworkAnatomy.html}).

@node How to install R, How to build and install the R.app, How to configure and build R, Building R from sources
@section How to install R
Once the compilation succeeds type:
@example
sudo make install
@end example
to install R in @emph{/Library/Frameworks} (unless changed at configure time). You must have admin privileges and your password will be required.

You can decide to change the installation destination by using the @emph{prefix} option:
final destination.
@smallexample
sudo make prefix=/my/new/R/location install
@end smallexample
As in the above, you don't need to specify the name @emph{R.framework} in the path. (See R documentation for details.)

@node  How to build and install the R.app, How to build universal R, How to install R, Building R from sources
@section How to build and install the R.app
The sources for the R.app GUI are currently not included in the global R source distribution. They are available in the form of a Xcode project on the R for Mac OS X @CRAN{} pages (released versions) as well as the SVN repository. In order to check out the latest development version, use
@example
svn co https://svn.r-project.org/R-packages/trunk/Mac-GUI
@end example
Before compiling R.app make sure @R{} is installed in @emph{/Library/Frameworks/R.framework} and working.

Using Xcode load the @emph{R.xcodeproj} project, select @emph{R} target (which is the default), set @emph{Deployment} configuration build. The same effect can be achieved on the command line in the @file{Mac-GUI} directory by typing:
@example
xcodebuild -target R -configuration Deployment
@end example

The current development is done using Xcode 2.2 or higher. The default deployment build is universal, therefore you will need universal R framework and Mac OS X 10.4u SDK. Make sure /Library is available inside the SDK, recent Xcode installations ensure this automatically.

For compatibility, the GUI offers an old-style project for Xcode 2.0 named @file{R.xcode} which will build PowerPC binary only. However, this project file is no longer actively maintained.

The build includes both R.app and this R for Mac OS X FAQ. However, it is recommended to use at least GNU texinfo 4.7, because a bug in previous versions leads to invalid html output. Mac OS X 10.4 (Tiger) and later include the correct version of makeinfo.

In addition, R.app also supports unix-style build which is run by simply issuing
@smallexample
make
@end smallexample
at the top level. It works on both PowerPC and Intel-based Macs, resulting in an universal binary.

R.app does not need to be installed in any specific way. Building R.app results in the R.app bundle which appears as one R icon. This application bundle can be run anywhere and it is customary to place it in the @emph{Applications} folder.

@node How to build universal R,  , How to build and install the R.app, Building R from sources
@section How to build universal R
Starting with @R{} 2.3.0 it is possible to build @R{} that runs on multiple architectures. One special application of this feature is to build @R{} that runs on both Intel and PowerPC based Macs on Mac OS X 10.4.4 or higher. Such @R{} build is called @emph{universal}.

In order to be able to build universal R, all necessary libraries must be available as @samp{i386} and @samp{ppc} binaries. For system libraries this is the default for Mac OS X on Intel Macs. Other libraries such as readline must be compiled accordingly.

In addition, the compilers must support both architectures as well. You will need Xcode Developer Tools version 2.4.0 or higher and a Fortran compiler that can create universal binaries. Such compiler is supplied with @R{} 2.6.x in the @CRAN{} binary package and available from @uref{http://r.research.att.com/tools/}.

The next step is to build a binary for each architecture. This can be either done natively on two machines - one PowerPC and one Intel based Mac, or by cross-compiling the PowerPC part on an Intel Mac. In either case, the configuration is the same.

Configure, build and install the @samp{ppc} binary (assuming @samp{R-2.6.2.tar.gz} is in the current directory, replace @samp{R-2.6.2} with any other version or name as appropriate):
@example
tar fxz R-2.6.2.tar.gz
mkdir R-ppc
cd R-ppc
../R-2.6.2/configure r_arch=ppc CC="gcc-4.0 -arch ppc" \
CXX="g++-4.0 -arch ppc" F77="gfortran-4.0 -arch ppc" \
FC="gfortran-4.0 -arch ppc"
make
make install
cd ..
@end example

Depending on your permissions, you may need to run @samp{sudo make install}. The next step is to build and install the Intel binary:

@example
mkdir R-i386
cd R-i386
../R-2.6.2/configure r_arch=i386 CC="gcc-4.0 -arch i386" \
CXX="g++-4.0 -arch i386" F77="gfortran-4.0 -arch i386" \
FC="gfortran-4.0 -arch i386"
make
make install
cd ..
@end example

The installation scripts in @R{} are intelligent enough to merge both builds together and create a universal @R{} framework. One crucial requirement for this to work is to use @samp{i386} and @samp{ppc} as the architecture names. Other supported architecture names are @code{ppc64} and @code{x86_64} for 64-bit builds. One R installation can contain all four architectures.

It is possible to use additional flags at configure time. To optimize the build for Intel Core 2 Duo processors, add the following flags for the Intel build:
@example
CFLAGS="-g -O2 -march=nocona" CXXFLAGS="-g -O2 -march=nocona" \
FFLAGS="-g -O2 -march=nocona" FCFLAGS="-g -O2 -march=nocona"
@end example

Since Mac OS X 10.4.8 @samp{vecLib} is now multi-threaded, so there is no need for threaded ATLAS anymore and the corresponding static library is no longer included in the toolbox.

Finally, the standard @R{} shell script uses by default the last installed architecture. This is probably not what you want, because the native architecture is known at run time. Therefore the line
@smallexample
: $@{R_ARCH=/i386@}
@end smallexample
can be replaced by
@smallexample
: $@{R_ARCH=/`arch`@}.
@end smallexample
to default to the current native architecture. It addition, it may be a good idea to make sure that the @samp{PATH} environment variable contains the path to your universal compiler, otherwise there may be problems with compilation of universal packages. Those are also modifications that you will find in the @CRAN{} release as compared to vanilla R.

@node Command line version of R, R.app, Building R from sources, Top
@chapter Command line version of R
The command line version of @R{} is identical to @R{} as used on other unix operating systems. Therefore general 
documentation for @R{} applies to this version as well.
On each release (and patched-release) ready to use binaries are distributed through @CRAN{}.
These binaries come with a common installer used by R.app so please read
the related notes (@pxref{How to get R.app}).
To use @R{} you probably need to add a symbolic link on your system as the @R{} binary is 
located inside the framework.
Suppose you have the @emph{/usr/local/bin} directory on your system (if you do not have one, you can use @emph{/usr/bin} instead) you should just type in your Terminal (a root password is required)
@smallexample
sudo ln -s /Library/Frameworks/R.framework/Resources/R /usr/local/bin/R
@end smallexample
Assuming that you have @emph{/usr/local/bin} in your @emph{PATH} environment variable, you will be able to launch R from any location on your system just by typing @emph{R}. In this way, when you install a new version of the @emph{R.framework} this link will point to the latest R binary.

@node R.app, How to install packages, Command line version of R, Top
@chapter R.app
@menu
* How to get R.app::            
* How to install the R.app::    
* The R Console::               
* General Features::            
* The Menus::                   
* Preferences::                 
* The near future of the R.app::  
* R.app Bugs::                  
@end menu

R.app is the name for the new Cocoa-based GUI for Mac OS X that was introduced in R 2.0. It appears as an icon labeled @emph{R}, but to avoid confusion with general @R{}, we prefer to use the name as it appears when using @emph{Get Info} on the GUI: @samp{R.app} This stands for @emph{R application}.

Internally R.app is a Cocoa program (hence written in Obj-C) that loads R dynamic library in order to use R facilities.

Historically there were two more GUIs for Mac OS X: @emph{RAqua} and @emph{Cocoa GUI bundle}. The latter was never officially released and RAqua was retired in R version 2.1, because it used legacy toolkit from the times of MacOS9.

@node How to get R.app, How to install the R.app, R.app, R.app
@section How to get R.app
R.app is part of the binary distribution of R for Mac OS X available from @CRAN{}. That distribution consists of one disk image containing multiple packages including R framework and R.app.

Development versions of R.app are made available on daily basis in the form of a disk image containing the R.app itself. See the Mac OS X pages on @CRAN{} for detail how to obtain such images (currently at @uref{http://R.research.att.com/}).

@node How to install the R.app, The R Console, How to get R.app, R.app
@section How to install the R.app
R.app is installed the same way as the R framework, namely using binary package provided on @CRAN{}. The @file{bin/macosx} directory of a @CRAN{} site contains a standard Apple installer package inside a disk image named @file{R.dmg} (optinally containing the version number). Download and double-click the image. New window will appear with a package icon representing the installer. Double-click that icon and it will install the current non-developer release of R, including R.app.

Nightly build typically come as a disk image that contains R.app itself and thus can be started directly from the disk image or installed by dragging the icon in the @samp{Applications} folder.

@node The R Console, General Features, How to install the R.app, R.app
@section The R Console
In this section you'll find general information on the R.app. For specific @R{} tasks that
can be done via the R.app using menus you should read below (@pxref{The Menus}). 
@menu
* The Input and the Output::    
* Copy and Paste::              
* The current and startup working directories::  
* Resizing the R Console::      
* R Console text colors::       
@end menu


@node The Input and the Output, Copy and Paste, The R Console, The R Console
@subsection The Input and the Output
The current design of the R Console is to have a single frame for input (user) and output (R).

@node Copy and Paste, The current and startup working directories, The Input and the Output, The R Console
@subsection  Copy and Paste
Copy and paste works in R as in any other Macintosh application.

If you want high resolution graphic exports, you can save the PDF format using the @emph{File/Save as} menu item (@pxref{Quartz device}). Or you can use supported formats in R through @code{pdf()}, @code{jpeg()} etc. (type @code{?capabilities} to get more details).

@node The current and startup working directories, Resizing the R Console, Copy and Paste, The R Console
@subsection The current and startup working directories
If not otherwise specified in the Preferences (@pxref{Preferences}), or if the specified path is no longer available, then the default working directory at startup is the user home.
The working directory can be changed using the @emph{setwd} R command or using the @emph{Misc} menu item @emph{Change working directory}. Finally it is possible to use a specific directory for a single @R{} session by dragging a folder onto the R.app icon. If R.app is not runnig, this will cause R.app to be started in the directory corresponding to the folder dragged. The same can be achieved on the command line - for example @code{open -a R .} causes R.app to be started using the current directory as the startup working directory.

@noindent
This feature is useful if you want different startup procedures defined by the @file{.Rprofile}; you can 
edit a @file{.Rprofile} (containing you personal initialization @R{} commands) in a particular directory and use
the Preferences (or any other method mentioned above) to change the startup directory. Next time you launch @file{R.app} the @file{.Rprofile} is read and executed by @R{} at startup. This is the equivalent on Unix (or the command line) to launch @R{} from different directories.

 
@node Resizing the R Console, R Console text colors, The current and startup working directories, The R Console
@subsection Resizing the R Console
When the R Console Window is resized, the R option @emph{width} is set appropriately so that any future
output will fit the window size. This behavior can be inhibited using the Preferences settings (@pxref{Preferences}).
On closing the R application, the position and the size of the R Console window are saved in the Preferences and reused
next time you launch R. You can inhibit R to do this using the appropriate Preferences settings.

@node R Console text colors,  , Resizing the R Console, The R Console
@subsection R Console text colors
Text windows and frames are divided in Read-Only and Read and Write ones. Text colors can be set separately
for the two kinds of windows. This happens as well for their respective backgrounds. Use the Preferences window to set these 
colors (@pxref{Preferences}).

@node General Features, The Menus, The R Console, R.app
@section General Features
@menu
* Editor::                      
* Editor undo and line numbers::  
* Editor text completion::      
* Editor function list::        
* Editor syntax coloring::      
* Editor (internal and external)::  
* Editor help::                 
* Drag & drop::                 
* Help system::                 
* History::                     
* Authentication and .libPath::  
* Preference Panes::            
@end menu

@node Editor, Editor undo and line numbers, General Features, General Features
@subsection Editor
R.app provides an integrated editor for editing of R code. It sports a number of features designed to help developing code inside R. The probably most often used function is the ability to execute code directly from the editor by pressing @kbd{@key{Command}-@key{Return}}. Other features include syntax highlighting, brace-matching, code completion and function indexing.

@node Editor undo and line numbers, Editor text completion, Editor, General Features
@subsection Editor undo and line numbers
The editor supports undo/redo operations on an appropriate level of granularity (used to
be all or nothing). The editor has an optional facility to show line numbers. These help with
locating error messages. The editor also responds to the 'Go to Line' Edit menu function. The
associated Preference Pane allows enabling/disabling of the line numbers, as well as setting line
number gutter width (to fit larger line numbers) and text margin width.

@node Editor text completion, Editor function list, Editor undo and line numbers, General Features
@subsection Editor text completion
Completion of typed input (both file names and R code) in the editor is available through the Edit menu 'Complete' or by typing @kbd{@key{Control}-@key{.}} (same as is Xcode). It uses the same facilities as the console window (for compatibility the console responds to both @key{Tab} and @kbd{@key{Control}-@key{.}}).

@node Editor function list, Editor syntax coloring, Editor text completion, General Features
@subsection Editor function list
The editor maintains a popup list of functions defined in the edited document. The list is available in the toolbar and is updated as you type. Selecting a function from that list causes the cursor to jump to the beginning of the function.

@node Editor syntax coloring, Editor (internal and external), Editor function list, General Features
@subsection Editor  syntax coloring
The editor supports syntax-highlighting for R code. It is possible to change the syntax highlighting colors using the Syntax Color Preference Pane (see below). Starting with R.app version 1.17 lazy syntax highlighting is used, which means that changes influencing the entire file (such as typing a single or double quote) no longer apply to the entire file, but only a few lines. This temporary state is usually recovered by closing the quote, but in some rare instances it may persist until a change is made to the first line of the offending quote. However, lazy highlighting brings huge speedup when editing large files.

@node Editor (internal and external), Editor help, Editor syntax coloring, General Features
@subsection Editor (internal and external)
By default, the editor used is incorporated into R.app, the Mac OS X GUI for R. It is a
relatively simple multi-document editor that supports the features listed above. Additionally,
two powerful commands are available to source the file being edited in its entirety (@kbd{Command-E})
or to source the current selection to @R{} (@kbd{Command-Return}). Using @R{}'s @code{edit()} function, allows
editing of R objects or files while @R{} is kept waiting for the edit session to finish.

It is possible to 'redirect' all @R{} requests to an external editor, which runs
outside R.app. In that case, it is not possible to keep @R{} waiting if @code{edit()} is used. Using
AppleScript it is easy to implement @kbd{Command-E} and @kbd{Command-Return} like functionality.


@node Editor help, Drag & drop, Editor (internal and external), General Features
@subsection Editor help
The editor contains a light-weight help system in form of a search filed placed inside the toolbar. It is possible to use either an exact or approximate search.
		
@node Drag & drop, Help system, Editor help, General Features
@subsection Drag & drop
Drag and drop of a directory on the R icon while R is not running will start R and
set the working directory. By default .RData and .Rhistory are fetched from this working directory.
If a file is dropped on thr R icon while R is not running, R is started, the file is either
restored (if it is a saved workspace), sourced into R or opened in the selected editor. Whether
the file is opened or sourced is specified by a Preference setting in the StartUp Preference Pane.
Note: At this point opening a file in the editor before R is finished loading will crash R.
While R is running, d&d of a directory updates the working directory. D&d of a file sources or
opens the file in the selected editor. Double clicking on files bound to ("Open With ...") R, if
R is not running, R is started and the file is sourced or opened in editor. If R is running, the
file is opened in the editor.
 
@node Help system, History, Drag & drop, General Features
@subsection Help system
The Help screen allows a user to go back or forward to previous help pages.
It is possible to print help pages. If a help topic is not found, a pop-up window allows
to exit the help search or expand the search to a fuzzy/approximate search.  
		
@node History, Authentication and .libPath, Help system, General Features
@subsection History
R.app uses history files that are (superset) compatible with history files created by R. Multiline
support remains available from inside R.app. Multiline is particularly useful when using the
@kbd{@key{Command}-@key{Return}} feature while editing an R script. Import and export allows storing and importing
history from files visible in the Mac OS Finder. Multiline is preserved. This can be set through
the StartUp Preference Panel. Default number of kept history entries is 250. A variety of history
entry cleanup modes is possible.
At a minimum I would suggest to select "Cleanup history entries". It's optional to select removal
of duplicate entries and strip comments.

@node Authentication and .libPath, Preference Panes, History, General Features
@subsection Authentication and .libPath
The official CRAN binaries come pre-packaged in such a way that administrator have sufficient privileges to update R and install packages system-wide. However, the default unix build requires root-authentication for package instllation and other administrative tasks. As it is not feasible to run the GUI as root, we provide the possibility to authenticate system commands issued from the GUI. The authentication requires an administrator login and causes all subsequent system commands to be executed as root. Use with care!

In order to allow non-administrators to maintain their own set of packages, R.app optionally adds @code{~/Library/R/x.y/library} to the @code{.libPaths} (see start-up preferences, @code{x.y} denotes the R version without patch level). It is possible to use the Package Installer to install packages either globally (admin users only) or for the current user only. Note that user-local packages are only used when the corresponding preference option is enabled. The default for admin users is to use system-wide directorie, for non-admin users local packages will be used.

@node Preference Panes,  , Authentication and .libPath, General Features
@subsection Preference Panes
Several aditional preference panes have been implemented (see below).

@menu
* Startup::                     
* Editor Preferences::          
* Syntax Colors::               
* Console Colors::              
* Quartz window::               
@end menu

@node Startup, Editor Preferences, Preference Panes, Preference Panes
@subsubsection Startup
The Drag & drop section defines drag & drop behaviour during R start-up. Options are to open
file in an editor or to source file. Default is to source the file.
The Default Library Paths section enables, on next start-up of R, to add a directory, e.g.
~/R/Library, to the
library search/install path. The initial working directory section can be used to enforce
the initial working directory. If no directory is specified, this directory is used as the
default. The Change button allows to select a new directory. The Always apply selection will
enforce the specified intial start-up directory. The history section controls reading of
the history file on startup. If selected, R will read history file on start-up.
The R history file field is used to read and store history from/to. This field can be edited
to allow selecting files starting with a period (e.g. .Rhistory). If you want the same history
file regardless of your selected working directory, specify a fixec path (e.g. ~/.Rhistory).
The Default button will reset the history file name to its default value. The History handling 
area allows setting of the max number of entries to be kept in history, to remove duplicate
entries, to cleanup history entries (this is very useful to remove blank lines when submitting
multiple lines using Command-Return) and the strip comments before the entry is added to the
history.

@node Editor Preferences, Syntax Colors, Startup, Preference Panes
@subsubsection Editor Preferences
If Built-in editor is selected, allows enable/disable of syntax coloring, brace highlighting
and the showing of line numbers. If External editor is selected, allows specifying which
external editor. That editor will be used for all editing functions. It runs as a separate
application. Using an external editor means that R will never wait while editing (e.g. edit(A)
will return immediately and open A in the external editor. Command-E and Command-Return like
functionality would need to be implemented by other means, i.e. AppleScript. The external editor
can be any application (e.g. SubEthaEdit, TextWrangler, BBEdit, Smultron, etc) or can be activated
through a shell script (e.g. see or smultron, both give better control on how to start the editor).
					
@node Syntax Colors, Console Colors, Editor Preferences, Preference Panes
@subsubsection Syntax Colors
Enables to select the syntax colors.

@node Console Colors, Quartz window, Syntax Colors, Preference Panes
@subsubsection Console Colors
Enables to select the input/output colors in R Console.

@node Quartz window,  , Console Colors, Preference Panes
@subsubsection Quartz window
Use the Quartz preference pane to override R Quartz width/height parameters if override is enabled.
You can set the default location for initial Quartz window. Subsequent windows are offset sligthly.
The Font section is not implemented. Restore defaults resets to default values.

@node The Menus, Preferences, General Features, R.app
@section The Menus
@menu
* Application Menu::            
* File Menu::                   
* Edit Menu::                   
* Misc Menu::                   
* Workspace Menu::              
* Packages Menu::               
* The Help Menu::               
@end menu

@node Application Menu, File Menu, The Menus, The Menus
@subsection Application Menu
The Application menu is the first one after the main Apple Menu.

With this menu you can access three items: 1. the About box, which tells you which version of R is currently in use, 2. Check for updates, which search on @CRAN{} if a new version
of the binary distribution of @R{} for Mac OS X is available (you need an internet connection), 3. you can access the Preferences (@pxref{Preferences}). 

@node File Menu, Edit Menu, Application Menu, The Menus
@subsection File Menu
This menu provides standard functionalities. 
The @emph{open} command is associated to the action  @emph{Source @R{} code}, which means that you can select a file, which is a script, and it will be executed
in @R{}. This is a interface to the @R{} source command @command{source}.

@node Edit Menu, Misc Menu, File Menu, The Menus
@subsection Misc Menu
Apart for standard functionalities, the only relevant item in this menu is the @emph{Edito Object} which is an interface to
the  @R{} @command{edit} function.

@node Misc Menu, Workspace Menu, Edit Menu, The Menus
@subsection Misc Menu
With this menu you can load and save the history of commands typed in the @R{} Console or view what's currently inside.
You can also change the current working directory, let @R{} show you the current working directory or set it back to the
startup directory. From release 1.9.0 of @R{} the current working directory is also shown on the main window bar.

@node Workspace Menu, Packages Menu, Misc Menu, The Menus
@subsection Workspace Menu
Here you find self explanatory menu items for manage your workspace in @R{}. You can either load and save the workspace also
by specifying file name. All of these are interfaces to the @command{load} and @command{save} @R{} commands.
The only relevant item, which is specific to this GUI, is the @emph{Browse workspace}. This will open a window with a summary
description of the objects in your workspace. Complex objects (like lists, data.frame etc) can be expanded (one level only though).

@node Packages Menu, The Help Menu, Workspace Menu, The Menus
@subsection Packages Menu
Using this menu you can have access to the list of packages and data-sets installed on your system and to the ones
on @CRAN{} or on the Bioconductor site.

With the first two menus you can load and detach packages and data-set from the workspace.
Let's start with the @emph{Package Manager}. This opens a window with several columns displayed. 
For each package on your system you can see a check box, the current status of the package (loaded/not loaded), its name
and the package description text. You use the check box to select/de-select the packages you want.
On window closure, the checked packaged will be loaded and the unchecked ones (if loaded) will the detached (not completely as on Mac OS X you cannot
unload completely dynamic libraries).

The same applies to the @emph{Dataset Manager} menu but for data-sets.

You can than get or update packages @CRAN{} either in binary or source format. Daily build of @CRAN{} packages are available
for Mac OS X. If you don't know how to build @R{} itself from source (@pxref{Building R from sources}), 
you'll probably be unable to build packages from source on your own.
In this case, you should always choose for the binary option. These binary packages work (for sure!) for the release version of @R{} for Mac OS X
you find on @CRAN{} even though it is not excluded that they will work for other prebuilt versions of @R{}.


When you attempt to install packages from @CRAN{}, @R{} first tries to get a connection to the Internet to download
the list of available packages. Than a window will open similar to the one in the package manager with the only difference that
for each package there is also the information concerning the version of the package installed on your system (if any) and
the version of the prebuilt package available on @CRAN{}. When you close the window, the select packages will be downloaded.

The same strategy applies to the Bioconductor menu item, with some more options typical of the Bioconductor way
of managing packages.

For some reason it could happen that you have the package you want to install (either in binary or source form) on one of your
local disks, or even a directory containing a package source. You can use the last menu to do the task of installing the package.
Having a package in a directory form usually applies to people that are developing packages themselves.


For more information on this topic see also @ref{How to install packages}.

@node The Help Menu,  , Packages Menu, The Menus
@subsection The Help Menu
Using this menu you can open the on-line manuals (@emph{R Help}), read this FAQ and  review the latest changes, bug fixes and new features of R for Mac OS X (@emph{What's new in this version}).
There are also interfaces to the R @emph{help} and @emph{help.search} functions as well as the @emph{example} function. 

@node Preferences, The near future of the R.app, The Menus, R.app
@section Preferences
You can set several aspects of the @R{} GUI via preferences. You can access the Preferences window via the Application menu when the
@R{} Console is open.
Preferences are organized in Tabs, more or less grouped for content.

@menu
* Text Windows tab::            
* Quartz device tab::           
* Packages tab::                
* Misc tab::                    
@end menu

@node Text Windows tab, Quartz device tab, Preferences, Preferences
@subsection Text Windows tab
You can change the font size, face and the tab size in all the windows including the Console.
If you have help windows opened, the changed only apply to the Console window and to the window
you'll open from now on. This is a misfeature more than a bug.

You can also change the foreground and background colors for the read-only windows (i.e. the @R{} Console
output and the Help windows) and for read-and-write windows (i.e. the @R{} Console input and the Edit windows).
At the moment you cannot change the color of the cursor which always stays black which ever  background you choose.
So, for the time being, it's a bad idea to set the background of the @R{} Console to black.

You have also the possibility to check two options. The first is for adapting the @R{} output when you resize the
@R{} Console to the maximum character displayable, the second one is to let @R{} remember the position of the
@R{} Console on exit.

@node Quartz device tab, Packages tab, Text Windows tab, Preferences
@subsection Quartz device tab
You can set all the parameters of the @command{quartz} device for this tab. Please note: your changes only take effect
if you select the final checkbox, namely @emph{override the R quartz default settings}.

This also apply to the @emph{Quartz window position} option even if it is not a @command{quartz} parameter itself.


@node Packages tab, Misc tab, Quartz device tab, Preferences
@subsection Packages tab
From this tab you can set the default repositories for the @CRAN{} and Bioconductor urls. This will affect the
corresponding @R{} @command{options}.

@node Misc tab,  , Packages tab, Preferences
@subsection Misc tab
For this tab you can decide to redirect the stderr and stdout of @R{} and the tasks launched by @R{}, to the @R{} Console.
This is useful, for example, during package installation. If you don't check these options, every output will be sent to the @emph{Console}
application which you can find on every Mac OS X installation inside the directory @file{/Applications/Utilities}.

You can also set the startup working directory. This is very useful for having different sessions in different
directories (see @ref{The current and startup working directories} and @ref{How can I have a per session .Rprofile?}).

@node The near future of the R.app, R.app Bugs, Preferences, R.app
@section The near future of the R.app
We have introduced R.app in R 2.0. Although it was a new apporach, tt that point it was mainly replicating features fount in the old Carbon GUI. With R 2.1 we have moved more towards look at feel of the OS X operating system and worked mainly on improving the editor and its integration. In the near future we want to continue to improve the interface, add new features and exploit the possibilities of Mac OS X 10.4 (Tiger).

The R.app is still very much a moving target. Although we release official versions with each R release, we continue to work on R.app and offer experimental builds that can be used with the last official release of R. See @uref{http://www.economia.unimi.it/R} for the current links to the most recent R.app.

@node R.app Bugs,  , The near future of the R.app, R.app
@section R.app Bugs
On Unix systems a bug report can be generated using the function
@code{bug.report()}.  This automatically includes the version
information and sends the bug to the correct address.  Alternatively the
bug report can be emailed to @email{R-bugs@@R-project.org} or submitted
to the Web page at @uref{http://bugs.R-project.org/}.

Before you fill a bug report, please try to reproduce it using both R.app and the console version of R (if applicable). If the bug if R.app-specific, please report the bug to @email{R-SIG-Mac@@R-project.org} instead.

In any circumstances, in case of a crash, please report the 
crash.log for the @emph{R.bin} and/or @emph{R.app} application. You can get this
crash.log using the @emph{Console.app} located inside @emph{/Applications/Utilities}.

@node How to install packages, R and external applications, R.app, Top
@chapter How to install packages
You have several options for installing new packages on your system. We discuss here only the interface to the standard
@R{} functions like @command{install.package}. For the @R{} functions see the standard @R{} documentation.

@menu
* Which kind of packages can I install using the GUI?::  
* Installation of packages::    
* Installation of source packages::  
* Building universal package::  
* Can I install packages built for other platforms?::  
* Where are the packages I've installed?::  
@end menu

@node Which kind of packages can I install using the GUI?, Installation of packages, How to install packages, How to install packages
@section Which kind of packages can I install using the GUI?
At the moment the GUI provide direct access/download/installation of packages located on @CRAN{}, the Bioconductor repository or a custom repository. You can also install packages from local files, either binary of source packages, as explained below. Otherwise you can use the appropriate @R{} commands (see @code{install.packages}) to install packages from a specific location other than the above mentioned ones.

@node Installation of packages, Installation of source packages, Which kind of packages can I install using the GUI?, How to install packages
@section Installation of packages
@R{} for Mac OS X recognizes packages in two forms: @emph{binary} packages and @emph{source} packages.

Binary packages are @R{} packages in ready-to-use form, such that no additional tools are necessary for their use. Binary packages are specific for a given @R{} version and OS. @CRAN{} and Bioconductor repositories offer @R{} packages in binary form for the last released @R{} version. Unlike on other unix systems, R for Mac OS X installs binary packages by default, i.e. @code{install.packages} will look for binary repositories unless instructed otherwise.

Source packages are general in that they can be used on any platform and OS supported by @R{}, but they need to be processed and/or compiled before they can be used. Additional tools are necessary for that, see @pxref{Installation of source packages} for details. For most users binary packages are sufficient.

On Mac OS X packages can be installed in three ways:

@itemize
@item
Using @emph{Package Manager} in the R.app GUI (recommended for most Mac users)

@item
Using @code{install.packages} command in @R{}

@item
Using @code{R CMD INSTALL} command in the shell (aka @emph{Terminal})
@end itemize

The latter two methods are common to all unix systems and as such described in the general R documentation. In the following we will concentrate on using the @emph{Package Installer}.

@noindent
If you decide to install packages you should use the @emph{Packages & Data} menu of the GUI, in particular the sub-item @emph{Package Installer}. Select the repository, package type (binary or source) and press @emph{Get List}. This will connect to the repository through the Internet and a list all packages available for installation. The list tells you if a package is already installed on your system, the version of the package available on @CRAN{} and the version of the same package if already installed. 

@noindent
You can use the search field to narrow the list of package to those matching your search criteria. Additionally you can use the search list menu to list only packages that are already installed on your system which is useful for comparing versions of available and installed packages. Finally, you can filter down to packages that have been installed by a previous @R{} version as to allow a simple upgrade.

@noindent
Select any package you want to install and press the @emph{Install} button. You can follow the progress of the installation in the @R{} Console. Once the required packages are installed, the list is re-loaded to reflect the versions of newly installed packages.

@noindent
If you want to update all packages to the latest version, select the repository to use for the packages and press @emph{Update All}. @R{} will automatically determine the list of packages that can be updated and present you with a selection of packages to update.

@noindent
You can also download any other package from the Internet yourself and decide to install it from source. In such case select one of the local entries 
in the top left list and press the @emph{Install} button (which is now enabled).

@noindent
Packages can also be installed from other repositories by selecting @emph{Other Repository} source. Enter the repository URL in the adjacent field. Note that currently the Package Installer assumes that custom repositories maintain proper hierarchy for both source and binary packages the same way CRAN does when using @emph{Other Repository}. If your custom repository is flat, select @emph{Other Directory URL} in the installation type list.

@node Installation of source packages, Building universal package, Installation of packages, How to install packages
@section Installation of source packages

Usually it is much faster and easier to install binary packages, because they are immeditely ready to use. On the other hand only packages that pass all tests are available in binary form from @CRAN{}. If your desired package is not available in binary form, you will need to use its source form. Source packages have to be compiled first before they can be used. If you want to install a source package, you will need the same working setup for building R itself (see @pxref{Building R from sources}), including Apple Xcode Tools and a working @FORTRAN{} compiler (if the package requires it).

@strong{Important:} When using binary @R{} installation from @CRAN{}, you must use Xcode 2.4.0 or higher (available from @pxref{Apple Developer Connection}). Although @R{} can be built using older tools, the way it is build depends on the version of the tools and therefore your must upgrade at least to the version of Xcode that the @CRAN{} build uses. Failing to do so will result in the following error at compile time:
@smallexample
/usr/bin/libtool: unknown option character `m' in: -macosx_version_min
@end smallexample

Another sign of missing Xcode tools is when the installation fails with
@smallexample
make: command not found
@end smallexample

@node Building universal package, Can I install packages built for other platforms?, Installation of source packages, How to install packages
@section Building universal packages
Starting with R 2.3.0 the same binary package can be used for both PowerPC and Intel based Macs. Such a package is called @emph{universal}, because it works on either platform. Building universal packages requires special handling. First, @R{} itself must be compiled as universal binary to support universal packages at all. The @CRAN{} binary is built this way, see @pxref{How to build universal R} for details.

Further, universal binaries can be currently built on Intel Macs only. The main reason is that the default Mac OS X installation on PowerPC based Macs does not include system libraries for Intel Macs (experienced users can try to add corresponding @code{-isysroot} for 10.4u SDK to @code{CC}). If you happen to have a PowerPC machine with full system libraries it should work. Finally, a compiler supporting both platforms is necessary, see @pxref{How to build universal R}.

Once all tools are in place it is considerably easy to build an universal binary. If the package does not contain a @emph{configure} script then a regular package installation using either @code{install.packages} or @code{R CMD INSTALL} automatically creates an universal binary. If the package contains a @emph{configure} script then it cannot be compiled in-place for multiple platforms, and the following process should be used. Assuming that you have a source package called @code{foo_1.0.tar.gz} that uses a @emph{configure} script, it can be installed universally using the following two-step process:

@example
R_ARCH=/i386 R CMD INSTALL foo_1.0.tar.gz
R_ARCH=/ppc R CMD INSTALL --libs-only foo_1.0.tar.gz
@end example

In the first step a full package for the Intel platform is built and installed. In the scond step a package for PowerPC platform is built, but only the relevant binary libraries are installed. This way both platforms share the same set of files except for the package library.

@code{R CMD INSTALL --build} does not support universal binaries of packages that contain @emph{configure} scripts for reasons stated above. Therefore it is necessary to create the resulting tar-ball manually. The following is just one example how the process could be automated (replace first line with the real package name and version):

@example
pkg=foo_1.0
rm -rf /tmp/pkg
mkdir /tmp/pkg
R_ARCH=/i386 R CMD INSTALL -l /tmp/pkg $pkg.tar.gz
R_ARCH=/ppc R CMD INSTALL -l /tmp/pkg --libs-only $pkg.tar.gz
tar fvcz $pkg.tgz -C /tmp/pkg `echo $pkg|awk -F_ '@{print $1@}'`
rm -rf /tmp/pkg
@end example

@node Can I install packages built for other platforms?, Where are the packages I've installed?, Building universal package, How to install packages
@section Can I install packages built for other platforms?
As a general rule the answer is @emph{yes} if the package does not contain any C/C++/Fortran code in the sources, otherwise
the answer is negative. Another condition is that the package and the installed version of @R{} should be 
the same major release, i.e. you can install a package built for @R{} 2.1.0 on @R{} 2.1.1, but usually not the same
package on @R{} 2.2.0.

@noindent
A Mac OS X specific requirements is that a prebuilt package is assumed to be named (and accordingly archived and compressed) as @file{package_name.tgz}. The build script uses the more common extension @code{.tar.gz} and thus the resulting file must be renamed. On Windows, for example, packages come in a zipped format.

@node Where are the packages I've installed?,  , Can I install packages built for other platforms?, How to install packages
@section Where are the packages I've installed?
The main library of packages is the one located inside the R.framework (in @code{/Library/Frameworks/R.framework/Resources/library}). This library contains the packages (base and recommended ones) distributed along with @R{}. Only administrators are allowed to install packages in this system-wide directory. Note that this directory is @R{}-version-specific. Optionally users can install private packages in their @code{~/Library/R/x.y/library} directory where @code{x.y} denotes the R version without the patch level (such as 2.6) - see startup preferences.

@noindent
The Package Installer performs installation to either place depending on the installation target setting. The default for an admin users is to install packages system-wide, whereas the default for regular users is their private place.

@noindent
If you happen to use @code{install.packages} @R{} function instead of the Package Installer, the regular unix behavior applies (see help pages for details). For default setup this means that the packages are installed according to the startup preference setting. You can check the current defaults by issuing
@example
.libPaths()
@end example

@noindent
@strong{Note:} When upgrading to a next major release of @R{}, users should delete their @code{~/Library/R/library} directory, because packages are incompatible across major @R{} versions. When you experience problems loading packages or starting R after an upgrade, make sure you don't have packages for your old @R{} version floating around. More recent versions of R.app (1.19) include the version number in the path to prevent this from happening.

@node R and external applications, Quartz device, How to install packages, Top
@chapter R and external applications

@menu
* AppleScript support::         
* External editors::            
* Finder actions::              
@end menu

@node AppleScript support, External editors, R and external applications, R and external applications
@section AppleScript support


@R{} has partial support for Apple-Scripts. 
At the moment R can be invoked and asked to run commands from an AppleScript script.
What follows is an example of script that interacts with @R{}. It firstly  invokes @R{} and then
sends commands to @R{} with the @command{cmd} applescript command. 

@example
set CommandLine to "R.Version()"
try
	tell application "R"
		activate
		with timeout of 90000 seconds
			cmd CommandLine
			cmd "Sys.getenv()"
			cmd "print(\"HelloWorld!\")"
		end timeout
	end tell
end try
@end example

@noindent
In the above, @command{cmd} is the (only) applescript command in the @R{} dictionary that is 
used to tell @R{} to execute an @R{} command in the R Console. The syntax is 
@example
cmd <command string>
@end example
where command string have to be in quotes. Actually, the output of the command
is not sent back to the application that is calling @R{} but to the @R{} Console directly.

@noindent
There are some issues. The first is that if @R{} is still not running, it will take a while (depending on 
how fast your machine is) to startup. In the meanwhile the script sends commands without waiting and it
could happen that some commands are missed by @R{}, i.e. they arrive before @R{} is ready to 
receive applescript commands. The second issue, is that it could be that the applescript calls a bad version
of @R{}. This could happen if you have an old version of @R{} (for example the old Carbon @R{}) installed on your
System.

@noindent
As an example, we report here a small script that asks @R{} to @command{source} a file using a file dialog.
@smallexample
set file_to_source to (choose file with prompt "Choose file to source") as alias

try
	tell application "R"
		activate
		with timeout of 90000 seconds
			cmd "source(\"" & file_to_source & "\")"
		end timeout
	end tell
end try
@end smallexample


@node External editors, Finder actions, AppleScript support, R and external applications
@section External editors
@R{} accepts the Apple Event command @emph{open}. This means than an external editor can communicate with @R{} sending
portions of @R{} code to execute via files. This is the approach used by the @R{}-Tcl Mode in Alpha X 
(see @uref{http://www.kelehers.org/alpha/}).


@node Finder actions,  , External editors, R and external applications
@section Finder actions
Dragging a file on the @R{} icon, causes @R{} to source this file via the @command{source} @R{} command or,
if the file is an @R{} image data file RDX1 or RDX2 (normally files with extension @file{.rda} or @file{.Rdata}), the data is loaded in the workspace and every object
with the same name in the workspace is overwritten without notice. Loading a data file is equivalent to
the @R{} command @command{load}.
At the moment there is no control over the file types, i.e. dragging wrong files (i.e. files that are
not @R{} scripts or image data) simply gives an error. It's up to the user to @emph{do the right thing}.

@noindent
If @R{} is not yet running this action causes @R{} to startup.

@node Quartz device, TclTk issues, R and external applications, Top
@chapter Quartz device
The quartz device is the native graphic device in R for Mac OS X. It's name derives from Apple's Quartz Technology
which is essentially similar to PDF rendering. One of the most amazing features of Quartz is antialiasing which gives you
@emph{very nice} plots and images. Try to compare  a quartz plot  with the same plot generated on
any other interactive device. For its PDF nature it is also resolution independent.
 
@menu
* Interactive mode::            
* Saving the image::            
* Copying the image into the clipboard::  
* Known bugs and missing features::  
@end menu

@node Interactive mode, Saving the image, Quartz device, Quartz device
@section Interactive mode
The quartz device allows for interaction. You can use both @command{identify} and @command{locator} functions.
To break the sequence you should press the @key{ESC} key on your keyboard as Apple's mouse have ever had only one
button. If you happen to have a multi-button mouse, you can use any of the additional buttons to break the loop, unless you re-defined the function of the buttons.

@node Saving the image, Copying the image into the clipboard, Interactive mode, Quartz device
@section Saving the image
You can can the content of the quartz device window into a PDF file. This is a very simple way to
export high quality graphics from @R{} into other applications on Mac OS X graphics is PDF based (so are almost all
applications available). However, this process uses @R{}'s PDF device and not Mac OS X PDF facilities and thus doesn't yeild an exact copy of the device contents. For Mac-native solution, see (@pxref{Copying the image into the clipboard}) and @command{quartz.save} command.

@node Copying the image into the clipboard, Known bugs and missing features, Saving the image, Quartz device
@section Copying the image into the clipboard
You can copy the content of the quartz device window in the clipboard to make the resulting image available for
pasting into other applications. The clipboard will contain both a PDF versiond and a bitmap version of the quartz device window. Which version will be used depends on the pasting applications, most modern application will prefer the PDF version which is of higher quality as it supports vector graphics.
Note that there is currently a difference between using the clipboard and saving to a PDF file (@pxref{Saving the image}). The latter will use R's PDF device which will not yield WYSIWYG results. However, using @command{quartz.save} command will produce the same result as the clipboard operation.

@node Known bugs and missing features,  , Copying the image into the clipboard, Quartz device
@section Known bugs and missing features
When rendering text and/or mathematical symbols the style is ignored, i.e. only plain style is drawn.
The printing function is not yet implemented.

@node TclTk issues, Internationalization of the R.app, Quartz device, Top
@chapter TclTk issues
Each binary distribution of @R{} available through @CRAN{} is built to use the X11 implementation of TclTk.
Of course a X windows server has to be started first. If you are not using the R.app you need to also
define the environment variable DISPLAY before attempting to use X11 from inside @R{}. You can do this as follows
@example
Sys.putenv("DISPLAY"=":0")
@end example
If you don't like the X11 GUI you would probably want to build R using the Aqua version of TclTk (@pxref{Aqua TclTk headers and libraries (optional)}).
After installing the R.framework you may have to use @code{CarbonEL} package to allow the quartz device to work under Aqua TclTk.

@node Internationalization of the R.app, Additional resources, TclTk issues, Top
@chapter Internationalization of the R.app
In R 2.1 both R and the R.app GUI introduced support for internationalization. Among other things this means that both messages and GUI elements can be translated into various languages. R.app automatically detects user's settings in the @emph{International} section of the System Preferences and uses that information to offer translated messages and GUI if available. Please note that both @emph{Language} and @emph{Formats} information is used so they should be set up consistently.

If you use a non-standard setup (e.g. different language than formats), you can override the auto-detection performed by setting @samp{force.LANG} defaults setting, such as for example
@example
defaults write org.R-project.R force.LANG en_US.UTF-8
@end example
will enforce US-english setting regardless of the system setting. Please note that you must always use @samp{.UTF-8} version of the locale, otherwise R.app will not work properly.

Another change from previous versions (R 2.0 and R.app 1.01) is the support for UTF-8 character encoding. By default R.app uses UTF-8 for newly created documents and for the console. When opening new documents R.app assumes UTF-8 and only if the document violates UTF-8 rules, it will try to fallback to legacy encoding, usually Mac Roman.

If you are interested in translating R.app GUI into other languages, please read the developer documentation @uref{http://developer.r-project.org/Translations.html} for details.

@node Additional resources, Acknowledgments, Internationalization of the R.app, Top
@chapter Additional resources
Here are few references that can be of interest for Mac OS X and/or developers.

@menu
* Apple Developer Connection::  
* The R for Mac OS X Developer page::  
@end menu

@node Apple Developer Connection, The R for Mac OS X Developer page, Additional resources, Additional resources
@section Apple Developer Connection
The Apple Developer Connection (can be reached at @uref{http://developer.apple.com}) is the main source
of information for Apple products (OS, hardware, software) for developers. You can subscribe for free to
ADC and get the latest up-to-date tools from Apple (compilers for example).

@node The R for Mac OS X Developer page,  , Apple Developer Connection, Additional resources
@section The R for Mac OS X Developer page
There is a page dedicated to development versions for R for Mac OS X. This page is located at
@uref{http://R.research.att.com/} and is maintained by Simon Urbanek.
It contains latest nightly builds of R and R.app as well as information on tools necessary to build R.

@node Acknowledgments, Sparse questions, Additional resources, Top
@chapter Acknowledgments

Special thanks go to Simon Urbanek, Jan de Leeuw, Byron Ellis and Thomas Lumley
in random order. Last but not least Apple for amazing OS and GUI.

@node Sparse questions,  , Acknowledgments, Top
@chapter Sparse questions
@menu
* How can I have a per session .Rprofile?::  
* What happens if I drag a file on the R icon?::  
* How can I interrupt lengthy operations or output?::  
* I see spurious error messages when starting R!::  
* Which BLAS is used and how can it be changed?::  
* I don't see a thing when installing packages!::  
* Why do I need custom compilers for the CRAN binary?::  
@end menu

@node How can I have a per session .Rprofile?, What happens if I drag a file on the R icon?, Sparse questions, Sparse questions
@section How can I have a per session .Rprofile?
You can by writing a @file{.Rprofile} file in your favorite
session directory and change accordingly the startup working directory using the Preferences (@pxref{The current and startup working directories}).

@node What happens if I drag a file on the R icon?, How can I interrupt lengthy operations or output?, How can I have a per session .Rprofile?, Sparse questions
@section What happens if I drag a file on the R icon?
In this case @R{} will try to source this file or load the image data file (@pxref{Finder actions}). If @R{} is not
yet running it will be launched.

@node How can I interrupt lengthy operations or output?, I see spurious error messages when starting R!, What happens if I drag a file on the R icon?, Sparse questions
@section How can I interrupt lengthy operations or output?
In R.app you can use the the @emph{Stop} toolbar button or the @key{ESC} (escape) key in the console window to interrupt a running calculation or output.

For the command line version the same is achieved by pressing @kbd{@key{Ctrl}-c}. Both applications honor the @code{INT} signal, i.e. you can type the following in a separate Terminal window to cancel all R computations:
@smallexample
killall -INT R
@end smallexample

@node I see spurious error messages when starting R!, Which BLAS is used and how can it be changed?, How can I interrupt lengthy operations or output?, Sparse questions
@section I see spurious error messages when starting R!

If you see error messages upon start of the R GUI which contain @code{Library/InputManagers} anywhere in the text, then you have some broken haxxies installed in your system. Those messages do NOT come from @R{}, so don't blame us. Bundles located in @code{Library/InputManagers} of your home (or system) are hacks that get loaded into every Mac application that you start. In most cases you don't seem them crashing, because most applications don't show the console ouput, but @R{} does, so all the errors those hacks are causing become visible. The easiest remedy is to delete all offending bundles (possibly the whole @code{Library/InputManagers} folder) and get a fixed version of the hack (if you need it). The most common cause for broken hacks is system updgrade (e.g. you get a new Mac and you transfer you settings which include those hacks that are incompatible with your new Mac).

If you want to disable all external error output in the GUI, use
@smallexample
defaults write org.R-project.R 'Ignore stderr' YES
@end smallexample
in the Terminal. Note, however, that this will disable @emph{all} error output from external programs including package installation or the @code{system} command.

@node Which BLAS is used and how can it be changed?, I don't see a thing when installing packages!, I see spurious error messages when starting R!, Sparse questions
@section Which BLAS is used and how can it be changed?

Which BLAS library is used depends on the way @R{} was compiled (see `R Installation and Anministration' manual for details). Current @R{} binaries supplied from CRAN provide both vecLib-based BLAS and reference BLAS shipped with @R{}. vecLib is a part of Apple's Accelerate framework which provides an optimized BLAS implementation for Mac hardware. Although fast, it is not under our control and may possibly deliver inaccurate results.

The CRAN binary uses @code{--enable-BLAS-shlib} option and two Rblas shared libraries are supplied: @file{libRblas.vecLib.dylib} which uses vecLib BLAS and @file{libRblas.0.dylib} which uses reference BLAS from @R{}. A symbolic link @file{libRblas.dylib} determines which one is used. Currently the default is to use vecLib for speed, although @R{} BLAS is recommended for precision.

In order to change which BLAS is used, change the @file{libRblas.dylib} symlink correspondingly - for example in Terminal:
@example
cd /Library/Frameworks/R.framework/Resources/lib

# for vecLib use
ln -sf libRblas.vecLib.dylib libRblas.dylib

# for R reference BLAS use
ln -sf libRblas.0.dylib libRblas.dylib
@end example

This feature is only present in the @R{} CRAN binary. Ordinarily compiled @R{} from sources will only have one of the above BLAS libraries, corresponding to the configuration options used.

@node I don't see a thing when installing packages!, Why do I need custom compilers for the CRAN binary?, Which BLAS is used and how can it be changed?, Sparse questions
@section I don't see a thing when installing packages!
The output is not produced continuously during the package installation. Unlike previous GUIs R.app does its best to display the output as soon as possible, but for example the documentation script does not print anything until done.

Also note that the development build of R.app sends output to the error console instead of the screen. You may want to check the @emph{Console} application in that case.

@node Why do I need custom compilers for the CRAN binary?,  , I don't see a thing when installing packages!, Sparse questions
@section Why do I need custom compilers for the CRAN binary?
As of @R{} 2.5.0 the custom compilers are no longer necessary (save for Fortran). @CRAN{} binary is now built using Apple's gcc compiler from Xcode Developer Tools 2.4.1 and a GNU Fortran 4.2.1 compiler. Xcode doesn't contain a Fortran compiler, therefore we must supply our own. It is available from @uref{http://r.research.att.com/tools/} and it lives in @code{/usr/local}.

@CRAN{} binaries of @R{} versions 2.3.0 to 2.4.1 supplied their own complier (gcc 4.0.3 in @code{/usr/local/gcc4.0}), overriding the Apple-supplied compiler. The system compiler was kept in place, but @R{} used the new compiler for compiling packages instead. The main reason for this was that the compiler supplied by Apple contained several fatal bugs that lead to crashes of @R{} due to incorrectly generated code, especially for the Intel Macs. This has been fixed in Xcode 2.4.0 so we switched back to Apple's compilers for @R{} 2.5.0 and later.

@bye

@c Local Variables: ***
@c mode: TeXinfo ***
@c End: ***
