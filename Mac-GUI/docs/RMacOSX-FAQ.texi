\input texinfo
@c %**start of header
@setfilename RMacOSX-FAQ.info
@settitle R for Mac OS X FAQ
@setchapternewpage on
@set FAQ-YEAR 2005
@set FAQ-VERSION 2.1-0 @value{FAQ-YEAR}-04-18
@set REL-VERSION 2.1.0
@documentlanguage en
@documentencoding ISO-8859-1
@c %**end of header

@c % makeinfo -D UseExternalXrefs --html --force --no-split RMacOSX-FAQ.texi

@dircategory Programming
@direntry
* R for Mac OS X FAQ: (MacOSX-FAQ).               The FAQ on R for Mac OS X
@end direntry

@finalout

@macro SPLUS{}
@sc{S-Plus}
@end macro

@macro R{}
@acronym{R}
@end macro

@macro CRAN{}
@acronym{CRAN}
@end macro

@macro HTML{}
@acronym{HTML}
@end macro

@macro FORTRAN{}
FORTRAN
@end macro

@macro XML{}
@acronym{XML}
@end macro

@macro XSL{}
@acronym{XSL}
@end macro

@macro Rapp{}
@sc{R.app}
@end macro


@titlepage
@title R for Mac OS X @acronym{FAQ}
@subtitle Frequently Asked Questions on R for Mac OS X
@subtitle Version @value{FAQ-VERSION}
@author Stefano M. Iacus, Simon Urbanek, Rob J. Goedman
@end titlepage

@ifinfo
@c We do not really see this in info, but in plain text output.
R for Mac OS X FAQ						 @*
Frequently Asked Questions on R for Mac OS X@*
Version @value{FAQ-VERSION}      @*
Stefano M. Iacus                 @*
Simon Urbanek                    @*
Rob J. Goedman                   @*

@sp 2
@end ifinfo

@ifnothtml
@contents
@end ifnothtml

@ifnottex
@node Top, Introduction, (dir), (dir)
@top R for Mac OS X FAQ
@ifhtml
@html
<h2>Frequently Asked Questions on R for Mac OS X</h2>
<h2>Version @value{FAQ-VERSION}</h2>
<address>Stefano M. Iacus</address>
<address>Simon Urbanek</address>
<address>Rob J. Goedman</address>
<p><p><hr><p>
@end html
@end ifhtml
@end ifnottex

@menu
* Introduction::                
* Building R from sources::     
* Command line version of R::   
* R.app::                       
* How to install packages::     
* R and external applications::  
* Quartz device::               
* TclTk issues::                
* Internationalization of the R.app::  
* Additional resources::        
* Acknowledgments::             
* Sparse questions::            
@end menu

@node Introduction, Building R from sources, Top, Top
@chapter Introduction
This R for Mac OS X FAQ is rather incomplete at the moment and requires contributions from users.
Anything specific to the R language can be found in the official R-FAQ (see @uref{http://cran.r-project.org/doc/FAQ/R-FAQ.html}).
Please send any requests/questions you would like answers on to the maintainers.

In this document @R{} refers to the core, command line based @R{} system while R.app refers to the GUI based Mac OS application that controls the underlying @R{}.

This document contains information on how to build @R{} from sources, how to install and run it.
It also contains a user guide to the R.app version of @R{}.
@menu
* How many versions of R for Mac OS X?::  
* What machines does R for Mac OS X run on?::  
* How can R for Mac OS X be obtained and installed?::  
@end menu

@node How many versions of R for Mac OS X?, What machines does R for Mac OS X run on?, Introduction, Introduction
@section How many versions of R for Mac OS X?

There is currently only one version of R for Mac OS X.
But R on Mac OS X can be used as a command-line application (@pxref{Command line version of R}), like on any
other Unix-like system, or via the R.app (@pxref{R.app}). This second approach in using R
for Mac OS X is mostly preferred by "traditional" Macintosh users.

@node What machines does R for Mac OS X run on?, How can R for Mac OS X be obtained and installed?, How many versions of R for Mac OS X?, Introduction
@section What machines does R for Mac OS X run on?

R for Mac OS X requires Mac OS X version 10.2 (Jaguar) or higher to run. The R.app GUI requires Mac OS X 10.3 (Panther) or higher. The latest version of the system is
always preferable though. We do not support Mac OS X version 10.1.

@node How can R for Mac OS X be obtained and installed?,  , What machines does R for Mac OS X run on?, Introduction
@section How can R for Mac OS X be obtained and installed?

@node Building R from sources, Command line version of R, Introduction, Top
@chapter Building R from sources
@menu
* What is needed to build R::   
* How to configure and build R::  
* How to install R::            
* How to build and install the R.app::  
@end menu

@node What is needed to build R, How to configure and build R, Building R from sources, Building R from sources
@section What is needed to build R
@menu
* C/C++ compiler (gcc 3.3 or later)::  
* Fortran compiler (g77 3.3 or later)::  
* libreadline 4.3 or higher (optional)::  
* X11 window server (optional)::  
* X11 TclTk headers and libraries (optional)::  
* Aqua TclTk headers and libraries (optional)::  
* TeX suite of tools for documentation (optional)::  
@end menu

@node C/C++ compiler (gcc 3.3 or later), Fortran compiler (g77 3.3 or later), What is needed to build R, What is needed to build R
@subsection C/C++ compiler (gcc 3.3 or later)

If you have Mac OS X 10.3 (aka Panther) or higher you just need to install the software from the Xcode Tools CD 
(which is CD number 4). This is only true if you bought Panther. If your computer came with pre-installed version of OS X, look into /Applications/Installers. Recent installations feature "Xcode Tools" folder containing the necessary installer. If neither of the above works for you, download Xcode from Apple Developer Connection site (@pxref{Apple Developer Connection}): in the download section, look for Xcode Tools v 1.1 or above (the most recent version of Xcode tools available for Panther is version 1.5). During the installation, don't forget to setect X11 SDK if you plan to use X11.

If you are using Mac OS X 10.2 (aka Jaguar) then you should download and install the 
Apple Developers Tools Dec 2002 including the latest updates which dates August 2003. Either it comes 
on a separate CD with your Mac or you can download these from the Apple Developer Connection site (@pxref{Apple Developer Connection})
In either cases be sure you have gcc version 3.3 or later - you can check the version by typing the following in a Terminal window:
@example
gcc --version
@end example

@node Fortran compiler (g77 3.3 or later), libreadline 4.3 or higher (optional), C/C++ compiler (gcc 3.3 or later), What is needed to build R
@subsection Fortran compiler (g77 3.3 or later)

Unfortunately the Xcode tools don't include a Fortran compiler. You need to install a version 3.3 or later of the Fortran compiler from gcc which is built for Mac OS X. The following instructions apply to binaries coming from HPC for Mac OS X page @uref{http://hpc.sourceforge.net}. Please note: there are multiple versions of the Fortran binaries, depending on the system you use - pick the appropriate one.

Once you have the binaries, please do the following (you'll be asked for a root password):
cd to the download folder and type
@example
sudo tar -zxvf g77v3.4-bin.tar.gz -C /
rehash
@end example
It installs everything in @file{/usr/local}. The name of the .tar.gz archive can be different, see the related web page.


@node libreadline 4.3 or higher (optional), X11 window server (optional), Fortran compiler (g77 3.3 or later), What is needed to build R
@subsection libreadline 4.3 or higher (optional)
The readline library is optional and only necessary for OS X 10.3 (Panther) and earlier. Mac OS X 10.4 (Tiger) comes with readline support, so you can skip this step.

Readline is necessary if you want to be able to retrieve history using use arrow keys or for tab completion of filenames
when you run R as a command line tool. The original source archive is located at GNU web page @uref{ftp://www.gnu.org}. 
If using readline 4.3, you need to modify the original file @file{shlib/Makefile.in} in order to make it
work under Mac OS X 10.2.x and later (this is because libreadline needs to be linked against
@code{-lncurses -lcc_dynamic}). If you can do better at configure time working on the original archive 
let me know. I suggest you to download my patched version from @uref{http://www.economia.unimi.it/R}. 
Once you have done, please do the following (you'll be asked for a root password):
uncompress the archive, cd inside the folder and type the following
@example
./configure
make
sudo make install
@end example
It installs everything in @file{/usr/local}.
These instructions apply to both Jaguar and Panther.

@node X11 window server (optional), X11 TclTk headers and libraries (optional), libreadline 4.3 or higher (optional), What is needed to build R
@subsection X11 window server (optional)
X11 window system is necessary to use the X11 device in R and other devices that rely on X11.
Mac OS X 10.3 (Panther) and later include X11 on the installation CD/DVD, however it is not selected by default. If it is not installed, you can re-install it using the original installtion CD/DVD. The corresponding package is either visible directly, or you can select the multi-package of bundled software, control-click on it, select "Show Original" - in the same directory that it will warp you to there is the X11 installer, labeled "X11User.pkg".

In addition to the user part, you need to install the X11 SDK package from the Xcode Tools CD. Again, it is not selected by default, so make sure you select it during the installation of Xcode Tools.

Mac OS X 10.2 (Jaguar) does not include X11 installer. However, there are two options to obtain X11 for Jagure: Apple released X11 beta for Jaguar which is still around, although not officially supported. It features the Quartz mwindow manager that integrates nicely into the system. If you are unable to find Apple's X11 beta, you will need to install both the X11 Window server and the X11 SDK package from 
the XFree86 web page. Other versions such as using fink are available, too.

@node X11 TclTk headers and libraries (optional), Aqua TclTk headers and libraries (optional), X11 window server (optional), What is needed to build R
@subsection X11 TclTk headers and libraries (optional)
If you plan to use tcltk package for R, you need to download the sources of the Tcl and Tk 8.4.x packages to build yourself the sources. 
The original sources can be found on the official TclTk web page @uref{http://www.tcl.tk/software/tcltk/8.4.html}.
Please do the following respecting the sequence (you'll be asked for a root password). These are examples for version 8.4.4
of the Tcl and Tk sources, you'll probably find new version on the web page, thus only the name of the .tar.gz archives
changes.


For Tcl: download the tlc 8.4 sources, cd inside the folder where you have downloaded the archive and
type:
@example
tar zxf tcl8.4.4-src.tar.gz
cd tcl8.4.4/unix/
./configure
make
sudo make install
@end example

For Tk: download the tk 8.4 sources, cd inside the folder where you have downloaded the archive and type:
@example
tar zxf tk8.4.4-src.tar.gz
cd tk8.4.4/unix/
./configure
make
sudo make install
@end example

@node Aqua TclTk headers and libraries (optional), TeX suite of tools for documentation (optional), X11 TclTk headers and libraries (optional), What is needed to build R
@subsection Aqua TclTk headers and libraries (optional)
Mac OS X 10.4 (Tiger) comes with Aqua TclTk libraries and those will be detected automatically. For older versions of OS X you need to obtain those separately. Once you have installed the AquaTclTk libraries and headers files, you should configure @R{} using this additional
arguments
@example
--with-tcl-config=/Library/Frameworks/Tcl.framework/tclConfig.sh 
--with-tk-config=/Library/Frameworks/Tk.framework/tkConfig.sh
TCLTK_LIBS='-framework Tcl -framework Tk'
TCLTK_CPPFLAGS='-I/Library/Frameworks/Tcl.Framework/Headers -I/Library/Frameworks/Tk.Framework/Headers'
@end example

@node TeX suite of tools for documentation (optional),  , Aqua TclTk headers and libraries (optional), What is needed to build R
@subsection TeX suite of tools for documentation (optional)
There is a nice installer, called the i-installer II, that allows you to install a complete 
teTeX distribution. You can find details on the i-installer at @uref{http://www.rna.nl/ii.html}. 
The teTeX is one of the i-Packages.

@node How to configure and build R, How to install R, What is needed to build R, Building R from sources
@section How to configure and build R
Download the latest sources of R from @CRAN{}. Unpack the archive with tar -zxf @emph{name_of_R_sources_archive} and cd
inside the R sources directory. Then you need to configure R for your system and build R. 
Just type
@example
./configure --with-blas='-framework vecLib' --with-lapack --with-aqua 
make
@end example
This will configure R to be built as a Framework to be installed inside your @emph{/Library/Frameworks} directory with the name 
@emph{R.framework}. You can change the default location of the @emph{R.framework} 
installation at configure time by specifying the flag @emph{--enable-R-framework[=DIR]}, i.e. 
with something like
@example
./configure --with-blas='-framework vecLib' --with-lapack 
            --with-aqua --enable-R-framework=FOO
@end example
and the final destination of the @emph{R.framework} will be @emph{FOO/R.framework}, which means that you 
don't have to specify the @emph{R.framework} text in the path. 

@node How to install R, How to build and install the R.app, How to configure and build R, Building R from sources
@section How to install R
A standard installation of R requires you have built it as a Framework. At this point just type (a root 
password will be required):
@example
sudo make install
@end example
and all will be installed in @emph{/Library/Frameworks}.
You can decide to change the R.framework destination by using the @emph{prefix} option specifying the 
final destination.
@smallexample
sudo make prefix=/where/you/want/R.framework/to/go install
@end smallexample
As in the above, you don't need to specify the name @emph{R.framework} in the path.

@node  How to build and install the R.app,  , How to install R, Building R from sources
@section How to build and install the R.app
The sources for the R.app GUI are currently not included in the global R source distribution. They are available in the form of a Xcode project on the R for Mac OS X pages as well as the SVN repository. Before compiling R.app make sure R is installed as @emph{/Library/Frameworks/R.framework} and working.

Using Xcode load the @emph{R.xcode} project, select @emph{R} target (which is the default), set @emph{Deployment} building style and build. The same effect can be achieved on the command line in the @emph{Mac-GUI} directory by typing:
@example
xcodebuild -target R -buildstyle Deployment
@end example
The build includes both R.app and the this R for Mac OS X FAQ. However, it is recommended to use at least GNU texinfo 4.7, because a bug in previous versions leads to invalid html output. Mac OS X 10.4 (Tiger) and later include the correct version of makeinfo.

R.app does not need to be installed in any specific way. Building R.app results in the R.app bundle which appears as one R icon. This application bundle can be run from anywhere and it is customary to place it in the @emph{Applications} folder.

@node Command line version of R, R.app, Building R from sources, Top
@chapter Command line version of R
The command line version of @R{} is identical to @R{} as used on other unix operating systems. Therefore general 
documentation for @R{} applies to this version as well.
On each release (and patched-release) ready to use binaries are distributed through @CRAN{}.
These binaries come with a common installer used by R.app so please read
the related notes (@pxref{How to get R.app}).
To use @R{} you probably need to add a symbolic link on your system as the @R{} binary is 
located inside the framework.
Suppose you have the @emph{/usr/local/bin} directory on your system (if you don't have one, you can use @emph{/usr/bin} instead) you should just type in your Terminal (a root password is required)
@smallexample
sudo ln -s /Library/Frameworks/R.framework/Resources/R /usr/local/bin/R
@end smallexample
Assuming that you have @emph{/usr/local/bin} in your @emph{PATH} environment variable, you'll be able to launch R from any location on your system just by typing @emph{R}. In this way, when you install a new version of the @emph{R.framework} this link will point to the latest R binary.

@node R.app, How to install packages, Command line version of R, Top
@chapter R.app
@menu
* How to get R.app::            
* How to install the R.app::    
* The R Console::               
* General Features::            
* The Menus::                   
* Preferences::                 
* The near future of the R.app::  
* R.app Bugs::                  
@end menu

R.app is the name for the new Cocoa-based GUI for Mac OS X that was introduced in R 2.0. It appears as an icon labeled @emph{R}, but to avoid confusion with general @R{}, we prefer to use the name as it appears when using @emph{Get Info} on the GUI: R.app This stands for @emph{R application}.

Internally R.app is a Cocoa program (hence written in Obj-C) that loads R dynamic library in order to use R facilities.

Historically there were two more GUI for Mac OS X: RAqua and Cocoa GUI bundle. The latter was never officially released and RAqua was retired in R version 2.1, because it used legacy toolkit from the times of Mac OS9.

@node How to get R.app, How to install the R.app, R.app, R.app
@section How to get R.app
R.app is part of the binary distribution of R for Mac OS X available from @CRAN{}. That distribution consists of one disk image containing multiple packages including R framework and R.app.

Development versions of R.app are made available on daily basis in the form of a disk image containing the R.app itself. See the Mac OS X pages on @CRAN{} for detail how to obtain such images.

@node How to install the R.app, The R Console, How to get R.app, R.app
@section How to install the R.app
R.app is installed the same way as the R framework, namely using binary package provided on @CRAN{}. The @file{bin/macosx} directory of a @CRAN{} site contains a standard Apple installer package inside a disk image named @file{R.dmg} (optinally containing version number). Download and double-click the image. New window will appear with a package icon representing the installer. Double-click that icon and it will install the current non-developer release of R, including R.app.

@node The R Console, General Features, How to install the R.app, R.app
@section The R Console
In this section you'll find general information on the R.app. For specific @R{} tasks that
can be done via the R.app using menus you should read below (@pxref{The Menus}). 
@menu
* The Input and the Output::    
* Copy and Paste::              
* The current and startup working directories::  
* Resizing the R Console::      
* R Console text colors::       
@end menu


@node The Input and the Output, Copy and Paste, The R Console, The R Console
@subsection The Input and the Output
The current design of the R Console is to have a single frame for input (user) and output (R).

@node Copy and Paste, The current and startup working directories, The Input and the Output, The R Console
@subsection  Copy and Paste
Copy and paste works in R as in any other Macintosh application.

If you want high resolution graphic exports, you can save the PDF format using the @emph{File/Save as} menu item (@pxref{Quartz device}). Or you can use supported formats in R through pdf(), jpeg() etc (type ?capabilities 
to get more details).


@node The current and startup working directories, Resizing the R Console, Copy and Paste, The R Console
@subsection The current and startup working directories
If not otherwise specified in the Preferences (@pxref{Preferences}), or if the specified path is no longer available, then
the default working directory at startup is the user home.
The working directory can be changed using the @emph{setwd} R command or using the @emph{Misc} menu item @emph{Change working directory}.
The current working directory is displayed on the main bar of the R Console window.

@noindent
This feature is useful if you want different startup procedures defined by the @file{.Rprofile}; you can 
edit a @file{.Rprofile} (containing you personal initialization @R{} commands) in a particular directory and use
the Preferences to change the startup directory. Next time you launch @file{R.app} the @file{.Rprofile} is read and executed
by @R{} at startup. This is the equivalent on Unix (or the command line) to launch @R{} from different directories.

 
@node Resizing the R Console, R Console text colors, The current and startup working directories, The R Console
@subsection Resizing the R Console
When the R Console Window is resized, the R option @emph{width} is set appropriately so that any future
output will fit the window size. This behavior can be inhibited using the Preferences settings (@pxref{Preferences}).
On closing the R application, the position and the size of the R Console window are saved in the Preferences and reused
next time you launch R. You can inhibit R to do this using the appropriate Preferences settings.

@node R Console text colors,  , Resizing the R Console, The R Console
@subsection R Console text colors
Text windows and frames are divided in Read-Only and Read and Write ones. Text colors can be set separately
for the two kinds of windows. This happens as well for their respective backgrounds. Use the Preferences window to set these 
colors (@pxref{Preferences}).

@node General Features, The Menus, The R Console, R.app
@section General Features
@menu
* Editor::                      
* Editor undo and line numbers::  
* Editor text completion::      
* Editor function list::        
* Editor syntax coloring::      
* Editor (internal and external)::  
* Editor help::                 
* Drag & drop::                 
* Help system::                 
* History::                     
* Authentication and .libPath::  
* Preference Panes::            
@end menu

@node Editor, Editor undo and line numbers, General Features, General Features
@subsection Editor
R.app provides an integrated editor for editing of R code. It sports a number of features designed to help developing code inside R. The probably most often used function is the ability to execute code directly from the editor by pressing @kbd{@key{Command}+@key{Return}}. Other features include syntax highlighting, brace-matching, code completion and function indexing.

@node Editor undo and line numbers, Editor text completion, Editor, General Features
@subsection Editor undo and line numbers
The editor supports undo/redo operations on an appropriate level of granularity (used to
be all or nothing). The editor has an optional facility to show line numbers. These help with
locating error messages. The editor also responds to the 'Go to Line' Edit menu function. The
associated Preference Pane allows enabling/disabling of the line numbers, as well as setting line
number gutter width and text margin width. Note: Right now the line number system is fairly crude
and makes the editor really slow on large files (1000s of lines). It will help to disable it
for such large files.

@node Editor text completion, Editor function list, Editor undo and line numbers, General Features
@subsection Editor text completion
Completion of typed input (both file names and R code) in the editor is available through the Edit menu 'Complete' or by typing @kbd{fn-tab}. It uses the same facilities as the console window.

@node Editor function list, Editor syntax coloring, Editor text completion, General Features
@subsection Editor function list
The editor maintains a popup list of functions defined in the edited document. The list is available in the toolbar and is updated as you type. Selecting a function from that list causes the cursor to jump to the beginning of the function.

@node Editor syntax coloring, Editor (internal and external), Editor function list, General Features
@subsection Editor  syntax coloring
The editor supports syntax-highlighting for R code. It is possible to change the syntax highlighting colors using the Syntax Color Preference Pane (see below)
		
@node Editor (internal and external), Editor help, Editor syntax coloring, General Features
@subsection Editor (internal and external)
By default, the editor used is incorporated into R.app, the Mac OS X GUI for R. It is a
relatively simple multi-document editor that supports the features listed above. Additionally,
two powerful commands are available to source the file being edited in its entirety (@kbd{Command-E})
or to source the current selection to @R{} (@kbd{Command-Return}). Using @R{}'s @code{edit()} function, allows
editing of R objects or files while @R{} is kept waiting for the edit session to finish.
It is possible to 'redirect' all @R{} requests to an external editor, which runs
outside R.app. In that case, it is not possible to keep @R{} waiting if @code{edit()} is used. Using
AppleScript it is easy to implement @kbd{Command-E} and @kbd{Command-Return} like functionality.

@node Editor help, Drag & drop, Editor (internal and external), General Features
@subsection Editor help
The editor contains a light-weight help system in form of a search filed placed inside the toolbar. It is possible to use either an exact or approximate search.
		
@node Drag & drop, Help system, Editor help, General Features
@subsection Drag & drop
Drag and drop of a directory on the R icon while R is not running will start R and
set the working directory. By default .RData and .Rhistory are fetched from this working directory.
If a file is dropped on thr R icon while R is not running, R is started, the file is either
restored (if it is a saved workspace), sourced into R or opened in the selected editor. Whether
the file is opened or sourced is specified by a Preference setting in the StartUp Preference Pane.
Note: At this point opening a file in the editor before R is finished loading will crash R.
While R is running, d&d of a directory updates the working directory. D&d of a file sources or
opens the file in the selected editor. Double clicking on files bound to ("Open With ...") R, if
R is not running, R is started and the file is sourced or opened in editor. If R is running, the
file is opened in the editor.
 
@node Help system, History, Drag & drop, General Features
@subsection Help system
The Help screen allows a user to go back or forward to previous help pages.
It is possible to print help pages. If a help topic is not found, a pop-up window allows
to exit the help search or expand the search to a fuzzy/approximate search.  
		
@node History, Authentication and .libPath, Help system, General Features
@subsection History
R.app uses history files that are (superset) compatible with history files created by R. Multiline
support remains available from inside R.app. Multiline is particularly useful when using the
Command Return feature while editing an R script. Import and export allows storing and importing
history from files visible in the Mac OS Finder. Multiline is preserved. This can be set through
the StartUp Preference Panel. Default number of kept history entries is 250. A variety of history
entry cleanup modes is possible.
At a minimum I would suggest to select "Cleanup history entries". It's optional to select removal
of duplicate entries and strip comments.

@node Authentication and .libPath, Preference Panes, History, General Features
@subsection Authentication and .libPath
TBD
				
@node Preference Panes,  , Authentication and .libPath, General Features
@subsection Preference Panes
Several aditional preference panes have been implemented (see below).

@menu
* Startup::                     
* Editor Preferences::          
* Syntax Colors::               
* Console Colors::              
* Quartz window::               
@end menu

@node Startup, Editor Preferences, Preference Panes, Preference Panes
@subsubsection Startup
The Drag & drop section defines drag & drop behaviour during R start-up. Options are to open
file in an editor or to source file. Default is to source the file.
The Default Library Paths section enables, on next start-up of R, to add a directory, e.g.
~/R/Library, to the
library search/install path. The initial working directory section can be used to enforce
the initial working directory. If no directory is specified, this directory is used as the
default. The Change button allows to select a new directory. The Always apply selection will
enforce the specified intial start-up directory. The history section controls reading of
the history file on startup. If selected, R will read history file on start-up.
The R history file field is used to read and store history from/to. This field can be edited
to allow selecting files starting with a period (e.g. .Rhistory). If you want the same history
file regardless of your selected working directory, specify a fixec path (e.g. ~/.Rhistory).
The Default button will reset the history file name to its default value. The History handling 
area allows setting of the max number of entries to be kept in history, to remove duplicate
entries, to cleanup history entries (this is very useful to remove blank lines when submitting
multiple lines using Command-Return) and the strip comments before the entry is added to the
history.

@node Editor Preferences, Syntax Colors, Startup, Preference Panes
@subsubsection Editor Preferences
If Built-in editor is selected, allows enable/disable of syntax coloring, brace highlighting
and the showing of line numbers. If External editor is selected, allows specifying which
external editor. That editor will be used for all editing functions. It runs as a separate
application. Using an external editor means that R will never wait while editing (e.g. edit(A)
will return immediately and open A in the external editor. Command-E and Command-Return like
functionality would need to be implemented by other means, i.e. AppleScript. The external editor
can be any application (e.g. SubEthaEdit, TextWrangler, BBEdit, Smultron, etc) or can be activated
through a shell script (e.g. see or smultron, both give better control on how to start the editor).
					
@node Syntax Colors, Console Colors, Editor Preferences, Preference Panes
@subsubsection Syntax Colors
Enables to select the syntax colors.

@node Console Colors, Quartz window, Syntax Colors, Preference Panes
@subsubsection Console Colors
Enables to select the input/output colors in R Console.

@node Quartz window,  , Console Colors, Preference Panes
@subsubsection Quartz window
Use the Quartz preference pane to override R Quartz width/height parameters if override is enabled.
You can set the default location for initial Quartz window. Subsequent windows are offset sligthly.
The Font section is not implemented. Restore defaults resets to default values.

@node The Menus, Preferences, General Features, R.app
@section The Menus
@menu
* Application Menu::            
* File Menu::                   
* Edit Menu::                   
* Misc Menu::                   
* Workspace Menu::              
* Packages Menu::               
* The Help Menu::               
@end menu

@node Application Menu, File Menu, The Menus, The Menus
@subsection Application Menu
The Application menu is the first one after the main Apple Menu.

With this menu you can access three items: 1. the About box, which tells you which version of R is currently in use, 2. Check for updates, which search on @CRAN{} if a new version
of the binary distribution of @R{} for Mac OS X is available (you need an internet connection), 3. you can access the Preferences (@pxref{Preferences}). 

@node File Menu, Edit Menu, Application Menu, The Menus
@subsection File Menu
This menu provides standard functionalities. 
The @emph{open} command is associated to the action  @emph{Source @R{} code}, which means that you can select a file, which is a script, and it will be executed
in @R{}. This is a interface to the @R{} source command @command{source}.

@node Edit Menu, Misc Menu, File Menu, The Menus
@subsection Misc Menu
Apart for standard functionalities, the only relevant item in this menu is the @emph{Edito Object} which is an interface to
the  @R{} @command{edit} function.

@node Misc Menu, Workspace Menu, Edit Menu, The Menus
@subsection Misc Menu
With this menu you can load and save the history of commands typed in the @R{} Console or view what's currently inside.
You can also change the current working directory, let @R{} show you the current working directory or set it back to the
startup directory. From release 1.9.0 of @R{} the current working directory is also shown on the main window bar.

@node Workspace Menu, Packages Menu, Misc Menu, The Menus
@subsection Workspace Menu
Here you find self explanatory menu items for manage your workspace in @R{}. You can either load and save the workspace also
by specifying file name. All of these are interfaces to the @command{load} and @command{save} @R{} commands.
The only relevant item, which is specific to this GUI, is the @emph{Browse workspace}. This will open a window with a summary
description of the objects in your workspace. Complex objects (like lists, data.frame etc) can be expanded (one level only though).

@node Packages Menu, The Help Menu, Workspace Menu, The Menus
@subsection Packages Menu
Using this menu you can have access to the list of packages and data-sets installed on your system and to the ones
on @CRAN{} or on the Bioconductor site.

With the first two menus you can load and detach packages and data-set from the workspace.
Let's start with the @emph{Package Manager}. This opens a window with several columns displayed. 
For each package on your system you can see a check box, the current status of the package (loaded/not loaded), its name
and the package description text. You use the check box to select/de-select the packages you want.
On window closure, the checked packaged will be loaded and the unchecked ones (if loaded) will the detached (not completely as on Mac OS X you cannot
unload completely dynamic libraries).

The same applies to the @emph{Dataset Manager} menu but for data-sets.

You can than get or update packages @CRAN{} either in binary or source format. Daily build of @CRAN{} packages are available
for Mac OS X. If you don't know how to build @R{} itself from source (@pxref{Building R from sources}), 
you'll probably be unable to build packages from source on your own.
In this case, you should always choose for the binary option. These binary packages work (for sure!) for the release version of @R{} for Mac OS X
you find on @CRAN{} even though it is not excluded that they will work for other prebuilt versions of @R{}.


When you attempt to install packages from @CRAN{}, @R{} first tries to get a connection to the Internet to download
the list of available packages. Than a window will open similar to the one in the package manager with the only difference that
for each package there is also the information concerning the version of the package installed on your system (if any) and
the version of the prebuilt package available on @CRAN{}. When you close the window, the select packages will be downloaded.

The same strategy applies to the Bioconductor menu item, with some more options typical of the Bioconductor way
of managing packages.

For some reason it could happen that you have the package you want to install (either in binary or source form) on one of your
local disks, or even a directory containing a package source. You can use the last menu to do the task of installing the package.
Having a package in a directory form usually applies to people that are developing packages themselves.


For more information on this topic see also @ref{How to install packages}.

@node The Help Menu,  , Packages Menu, The Menus
@subsection The Help Menu
Using this menu you can open the on-line manuals (@emph{R Help}), read this FAQ and  review the latest changes, bug fixes and new features of R for Mac OS X (@emph{What's new in this version}).
There are also interfaces to the R @emph{help} and @emph{help.search} functions as well as the @emph{example} function. 

@node Preferences, The near future of the R.app, The Menus, R.app
@section Preferences
You can set several aspects of the @R{} GUI via preferences. You can access the Preferences window via the Application menu when the
@R{} Console is open.
Preferences are organized in Tabs, more or less grouped for content.

@menu
* Text Windows tab::            
* Quartz device tab::           
* Packages tab::                
* Misc tab::                    
@end menu

@node Text Windows tab, Quartz device tab, Preferences, Preferences
@subsection Text Windows tab
You can change the font size, face and the tab size in all the windows including the Console.
If you have help windows opened, the changed only apply to the Console window and to the window
you'll open from now on. This is a misfeature more than a bug.

You can also change the foreground and background colors for the read-only windows (i.e. the @R{} Console
output and the Help windows) and for read-and-write windows (i.e. the @R{} Console input and the Edit windows).
At the moment you cannot change the color of the cursor which always stays black which ever  background you choose.
So, for the time being, it's a bad idea to set the background of the @R{} Console to black.

You have also the possibility to check two options. The first is for adapting the @R{} output when you resize the
@R{} Console to the maximum character displayable, the second one is to let @R{} remember the position of the
@R{} Console on exit.

@node Quartz device tab, Packages tab, Text Windows tab, Preferences
@subsection Quartz device tab
You can set all the parameters of the @command{quartz} device for this tab. Please note: your changes only take effect
if you select the final checkbox, namely @emph{override the R quartz default settings}.

This also apply to the @emph{Quartz window position} option even if it is not a @command{quartz} parameter itself.


@node Packages tab, Misc tab, Quartz device tab, Preferences
@subsection Packages tab
From this tab you can set the default repositories for the @CRAN{} and Bioconductor urls. This will affect the
corresponding @R{} @command{options}.

@node Misc tab,  , Packages tab, Preferences
@subsection Misc tab
For this tab you can decide to redirect the stderr and stdout of @R{} and the tasks launched by @R{}, to the @R{} Console.
This is useful, for example, during package installation. If you don't check these options, every output will be sent to the @emph{Console}
application which you can find on every Mac OS X installation inside the directory @file{/Applications/Utilities}.

You can also set the startup working directory. This is very useful for having different sessions in different
directories (see @ref{The current and startup working directories} and @ref{How can I have a per session .Rprofile?}).

@node The near future of the R.app, R.app Bugs, Preferences, R.app
@section The near future of the R.app
We have introduced R.app in R 2.0. Although it was a new apporach, tt that point it was mainly replicating features fount in the old Carbon GUI. With R 2.1 we have moved more towards look at feel of the OS X operating system and worked mainly on improving the editor and its integration. In the near future we want to continue to improve the interface, add new features and exploit the possibilities of Mac OS X 10.4 (Tiger).

The R.app is still very much a moving target. Although we release official versions with each R release, we continue to work on R.app and offer experimental builds that can be used with the last official release of R. See @uref{http://www.economia.unimi.it/R} for the current links to the most recent R.app.

@node R.app Bugs,  , The near future of the R.app, R.app
@section R.app Bugs
On Unix systems a bug report can be generated using the function
@code{bug.report()}.  This automatically includes the version
information and sends the bug to the correct address.  Alternatively the
bug report can be emailed to @email{R-bugs@@R-project.org} or submitted
to the Web page at @uref{http://bugs.R-project.org/}.

Before you fill a bug report, please try to reproduce it using both R.app and the console version of R (if applicable). If the bug if R.app-specific, please report the bug to @email{R-SIG-Mac@@R-project.org} instead.

In any circumstances, in case of a crash, please report the 
crash.log for the @emph{R.bin} and/or @emph{R.app} application. You can get this
crash.log using the @emph{Console.app} located inside @emph{/Applications/Utilities}.

@node How to install packages, R and external applications, R.app, Top
@chapter How to install packages
You have several options for installing new packages on your system. We discuss here only the interface to the standard
@R{} functions like @command{install.package}. For the @R{} functions see the standard @R{} documentation.

@menu
* Which kind of packages can I install using the GUI?::  
* Installation of packages from source::  
* Installation of pre-built binary packages::  
* Can I install packages built for other platforms?::  
* Where are the packages I've installed?::  
@end menu

@node Which kind of packages can I install using the GUI?, Installation of packages from source, How to install packages, How to install packages
@section Which kind of packages can I install using the GUI?
At the moment the GUI menus only provide direct access/download/installation of packages located on @CRAN{} or in the
Bioconductor repository. You can also install packages from local files, either binary of source packages, as explained
below. Otherwise you can use the appropriate @R{} commands to install packages from a specific location other than the above mentioned ones.


@node Installation of packages from source, Installation of pre-built binary packages, Which kind of packages can I install using the GUI?, How to install packages
@section Installation of packages from source
You can choose to install packages from source if they are located on @CRAN{}, on the BioConductor repository and
on your local disk. In any case, in order to be able to build packages from source, you need to have the same working
setup for building @R{} itself (@pxref{Building R from sources}). In same cases you can still build packages without all
the tools installed, but surely not for all the packages containing C/C++ or Fortran source code.

@noindent
If you decide to install packages from @CRAN{} you should use the @emph{Packages} menu of the GUI. In particular the sub-item @emph{Get CRAN packages.../Source}.
This will connect to @CRAN{} through the Internet and a list of available packages will be shown.
This is list tells you if a package is already installed on your system, the version of the package available on @CRAN{} and the version
of the same package if already installed.
You can make multiple selection of packages you intend to install using the checkboxes (one per package).
When you close this window, you'll be asked if you really want to download the selected packages and the process of installation
begins. If you don't select any package, nothing happens.
@R{} will not respond on the Console until you  close this window.
The same applies for packages in the BioConductor repository. You have also several other options specific to the
BioConductor way of managing repositories of packages.

@noindent
You can also download any other package from the Internet yourself and decide to install it from source.
You have to use @emph{Packages/->Install form local file} submenus. Where you can choose a standard @file{package.tar.gz}
tarball or the directory containing your package if you have the package in expanded form.



@node Installation of pre-built binary packages, Can I install packages built for other platforms?, Installation of packages from source, How to install packages
@section Installation of pre-built binary packages
Same considerations of above apply with two minor differences. The first one is that se only distribute pre-built
version of packages which pass all the test/checks on Mac OS X. So you'll see that some of the packages are missing with respect to the huge list
of source packages available on @CRAN{}.

@noindent
The second difference is that, when you install packages from local file, it is assumed that the binary package is named
as @file{package.tgz}. This is to distinguish among source and binary archives.

@node Can I install packages built for other platforms?, Where are the packages I've installed?, Installation of pre-built binary packages, How to install packages
@section Can I install packages built for other platforms?
As a general rule the answer is @emph{yes} if the package does not contain any C/C++/Fortran code in the sources, otherwise
the answer is negative. Another caution should be taken, that is, the package and the installed version of @R{} should be 
the same major release, i.e. you can install a package built for @R{} 1.8.0 on @R{} 1.8.1, but usually not the same
package on @R{} 1.9.0.

@noindent
A Mac OS X specific requirements, is that a prebuilt package is assumed to be named (and accordingly archived and
compressed) as @file{package_name.tgz}.
On Windows, for example, packages come in a zipped format.


@node Where are the packages I've installed?,  , Can I install packages built for other platforms?, How to install packages
@section Where are the packages I've installed?
The main library of packages is the one located inside the R.framework. This library contains the packages (base and
recommended ones) distributed along with @R{}. At the moment you cannot use the GUI Console to install packages 
in this location because of authentication problems, you can surely do this from the command line with an admin
password, with something like
@example
sudo R CMD INSTALL pkg_ver.tar.gz
@end example

@noindent
By default, the user of @file{R.app} installs packages inside the @file{Library/R/library} directory 
in his home directory, i.e. @file{~/Library/R/library}.
If you install a package using the @file{R.app} interfaces and you then use @R{} from the command line,
you won't see or have access to these packages unless you add the @file{~/Library/R/library} to the
list of libraries locations. You can do the following from inside @R{}
@example
.libPaths("~/Library/R/library")
@end example
or write this command in the @file{.Rprofile} file in your startup directory.
On some version of OS X the @file{~} symbol is not correctly expanded. You should preferably use this
version of the above command
@example
.libPaths(path.expand("~/Library/R/library"))
@end example

@noindent 
If you have a version of @file{R.app} installed on your system, it is likely that you have all the
packages installed in @file{~/Library/R/library}. You can add this library of packages in the @command{.libPaths()}
but most of them will probably not work as they were built for release 1.8.x of @R{}.


@node R and external applications, Quartz device, How to install packages, Top
@chapter R and external applications

@menu
* AppleScript support::         
* External editors::            
* Finder actions::              
@end menu

@node AppleScript support, External editors, R and external applications, R and external applications
@section AppleScript support


@R{} has partial support for Apple-Scripts. 
At the moment R can be invoked and asked to run commands from an AppleScript script.
What follows is an example of script that interacts with @R{}. It firstly  invokes @R{} and then
sends commands to @R{} with the @command{cmd} applescript command. 

@example
set CommandLine to "R.Version()"
try
	tell application "R"
		activate
		with timeout of 90000 seconds
			cmd CommandLine
			cmd "Sys.getenv()"
			cmd "print(\"HelloWorld!\")"
		end timeout
	end tell
end try
@end example

@noindent
In the above, @command{cmd} is the (only) applescript command in the @R{} dictionary that is 
used to tell @R{} to execute an @R{} command in the R Console. The syntax is 
@example
cmd <command string>
@end example
where command string have to be in quotes. Actually, the output of the command
is not sent back to the application that is calling @R{} but to the @R{} Console directly.

@noindent
There are some issues. The first is that if @R{} is still not running, it will take a while (depending on 
how fast your machine is) to startup. In the meanwhile the script sends commands without waiting and it
could happen that some commands are missed by @R{}, i.e. they arrive before @R{} is ready to 
receive applescript commands. The second issue, is that it could be that the applescript calls a bad version
of @R{}. This could happen if you have an old version of @R{} (for example the old Carbon @R{}) installed on your
System.

@noindent
As an example, we report here a small script that asks @R{} to @command{source} a file using a file dialog.
@smallexample
set file_to_source to (choose file with prompt "Choose file to source") as alias

try
	tell application "R"
		activate
		with timeout of 90000 seconds
			cmd "source(\"" & file_to_source & "\")"
		end timeout
	end tell
end try
@end smallexample


@node External editors, Finder actions, AppleScript support, R and external applications
@section External editors
@R{} accepts the Apple Event command @emph{open}. This means than an external editor can communicate with @R{} sending
portions of @R{} code to execute via files. This is the approach used by the @R{}-Tcl Mode in Alpha X 
(see @uref{http://www.kelehers.org/alpha/}).


@node Finder actions,  , External editors, R and external applications
@section Finder actions
Dragging a file on the @R{} icon, causes @R{} to source this file via the @command{source} @R{} command or,
if the file is an @R{} image data file RDX1 or RDX2 (normally files with extension @file{.rda} or @file{.Rdata}), the data is loaded in the workspace and every object
with the same name in the workspace is overwritten without notice. Loading a data file is equivalent to
the @R{} command @command{load}.
At the moment there is no control over the file types, i.e. dragging wrong files (i.e. files that are
not @R{} scripts or image data) simply gives an error. It's up to the user to @emph{do the right thing}.

@noindent
If @R{} is not yet running this action causes @R{} to startup.

@node Quartz device, TclTk issues, R and external applications, Top
@chapter Quartz device
The quartz device is the native graphic device in R for Mac OS X. It's name derives from Apple's Quartz Technology
which is essentially similar to PDF rendering. One of the most amazing features of Quartz is antialiasing which gives you
@emph{very nice} plots and images. Try to compare  a quartz plot  with the same plot generated on
any other interactive device. For its PDF nature it is also resolution independent.
 
@menu
* Interactive mode::            
* Saving the image::            
* Copying the image into the clipboard::  
* Known bugs and missing features::  
@end menu

@node Interactive mode, Saving the image, Quartz device, Quartz device
@section Interactive mode
The quartz device allows for interaction. You can use both @command{identify} and @command{locator} functions.
To break the sequence you should press the ESC key on your keyboard as Apple's mouse have ever had only one
button.

@node Saving the image, Copying the image into the clipboard, Interactive mode, Quartz device
@section Saving the image
You can can the content of the quartz device window into a PDF file. This is a very simple way to
export high quality graphics from @R{} into other applications on Mac OS X graphics is PDF based (so are almost all
applications available). If you want bitmap copies of you quartz device window just use copy, to copy the image into the clipboard and
paste the result in a graphic application (@pxref{Copying the image into the clipboard}).

@node Copying the image into the clipboard, Known bugs and missing features, Saving the image, Quartz device
@section Copying the image into the clipboard
You can copy the content of the quartz device window in the clipboard to make the resulting image available for
pasting into other applications. The clipboard will contain a bitmap copy of the quartz device window. If you
want to work with high resolution images, you should save the content of the quartz device as a PDF file (@pxref{Saving the image}).
Pay attention to the following fact: the bitmap image produced has exactly the same dimensions of the quartz device window. This
means that if you resize the window, the resulting image you obtain in the clipboard will have the same
dimensions and you cannot resize the image from the inside another applications (say MS-Word) without loosing quality.


@node Known bugs and missing features,  , Copying the image into the clipboard, Quartz device
@section Known bugs and missing features
When rendering text and/or mathematical symbols the style is ignored, i.e. only plain style is drawn.
The printing function is not yet implemented.

@node TclTk issues, Internationalization of the R.app, Quartz device, Top
@chapter TclTk issues
Each binary distribution of @R{} available through @CRAN{} is built to use the X11 implementation of TclTk.
Of course a X windows server has to be started first. If you are not using the R.app you need to also
define the environment variable DISPLAY before attempting to use X11 from inside @R{}. You can do this as follows
@example
Sys.putenv("DISPLAY"=":0")
@end example
If you don't like the X11 GUI you would probably want to build R using the Aqua version of TclTk (@pxref{Aqua TclTk headers and libraries (optional)}).
After installing the R.framework you should do the following to have the quartz device working under Aqua TclTk. Open a
Terminal window and move inside the @file{Resources/bin} directory of the @file{R.framework}
(usually @file{/Library/Frameworks/R.framework}), then type the following
@example
sudo /Developer/Tools/Rez -t APPL Carbon.r -o R.bin
@end example

@node Internationalization of the R.app, Additional resources, TclTk issues, Top
@chapter Internationalization of the R.app
In R 2.1 both R and the R.app GUI introduced support for internationalization. Among other things this means that both messages and GUI elements can be translated into various languages. R.app automatically detects user's settings in the @emph{International} section of the System Preferences and uses that information to offer translated messages and GUI if available. Please note that both @emph{Language} and @emph{Formats} information is used so they should be set up consistently.

Another change from previous versions (R 2.0 and R.app 1.01) is the support for UTF-8 character encoding. By default R.app uses UTF-8 for newly created docuemnts and for the console. When opening new documents R.app assumes UTF-8 and only if the document violates UTF-8 rules, it will try to fallback to legacy encoding, usually Mac Roman.

If you are interested in translating R.app GUI into other languages, please read the developer documentation @uref{http://developer.r-project.org/Translations.html} for details.

@node Additional resources, Acknowledgments, Internationalization of the R.app, Top
@chapter Additional resources
Here are few references that can be of interest for Mac OS X and/or developers.

@menu
* Apple Developer Connection::  
* The R for Mac OS X Developer page::  
@end menu

@node Apple Developer Connection, The R for Mac OS X Developer page, Additional resources, Additional resources
@section Apple Developer Connection
The Apple Developer Connection (can be reached at @uref{http://developer.apple.com}) is the main source
of information for Apple products (OS, hardware, software) for developers. You can subscribe for free to
ADC and get the latest up-to-date tools from Apple (compilers for example).

@node The R for Mac OS X Developer page,  , Apple Developer Connection, Additional resources
@section The R for Mac OS X Developer page
There is a page dedicated to the latest R-devel version of R. This page is located at
@uref{http://www.economia.unimi.it/R} and is maintained by Stefano M. Iacus.
This page is intended to give additional documentation for building  the latest R-devel
version of R. From time to time, snapshots of R-devel binaries are available for testing purposes.

@node Acknowledgments, Sparse questions, Additional resources, Top
@chapter Acknowledgments

Special thanks go to Simon Urbanek, Jan de Leeuw, Byron Ellis and Thomas Lumley
in random order. Last but not least Apple for amazing OS and GUI.

@node Sparse questions,  , Acknowledgments, Top
@chapter Sparse questions
@menu
* How can I have a per session .Rprofile?::  
* What happens if I drag a file on the R icon?::  
* How can I interrupt lengthy operations or output?::  
* I don't see a thing when installing packages!::  
@end menu

@node How can I have a per session .Rprofile?, What happens if I drag a file on the R icon?, Sparse questions, Sparse questions
@section How can I have a per session .Rprofile?
You can by writing a @file{.Rprofile} file in your favorite
session directory and change accordingly the startup working directory using the Preferences (@pxref{The current and startup working directories}).

@node What happens if I drag a file on the R icon?, How can I interrupt lengthy operations or output?, How can I have a per session .Rprofile?, Sparse questions
@section What happens if I drag a file on the R icon?
In this case @R{} will try to source this file or load the image data file (@pxref{Finder actions}). If @R{} is not
yet running it will be launched.

@node How can I interrupt lengthy operations or output?, I don't see a thing when installing packages!, What happens if I drag a file on the R icon?, Sparse questions
@section How can I interrupt lengthy operations or output?
You can now use the standard Macintosh control break sequence, that is you should press
"Cmd option" and "." (dot). This will interrupt any @R{} loops. The "Esc" key gives you the same result. 

@node I don't see a thing when installing packages!,  , How can I interrupt lengthy operations or output?, Sparse questions
@section I don't see a thing when installing packages!
Well, this is not a question but the answer is that you are not looking at the right place.
Every input and output which is not @R{} specific (i.e. the output of standard commands) is generally sent to
the standard output (stdout) or standard error (stderr) depending on its nature. In particular every call to the
@command{system} function, executes outside @R{} in a Mac OS X shell. The package installation is done via
the @command{system} facility. 
You have to use the Preferences to redirect the stderr and/or the stdout to the @R{} Console (see @ref{Misc tab})
or you can look at the @emph{Console} application inside @file{/Applications/Utilities} on your system.
This applies to every GUI application on Mac OS X so, as a general rule, if an application behaves strangely or quits,
please have a look to the @emph{Console} application.

@bye

@c Local Variables: ***
@c mode: TeXinfo ***
@c End: ***
